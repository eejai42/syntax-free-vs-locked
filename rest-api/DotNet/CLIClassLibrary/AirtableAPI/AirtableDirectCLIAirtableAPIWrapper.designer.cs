/*************************************************
AUTO Generated by SSoT.me - 2019
    EJ Alexandra - An airtable Tool
    DO NOT MAKE CHANGES TO THIS FILE - THEY WILL BE OVERWRITTEN
*************************************************/
using dc = AirtableDirect.CLI.Lib.DataClasses;
using SSoT.me.AirtableToDotNetLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace AirtableToDotNet.APIWrapper
{
    public partial class AirtableDirectCLIAirtableAPIWrapper : AirtableAPIWrapperBase
    {
        
        /// <summary>
        /// Called before a ideatransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to update</param>
        partial void BeforeUpdateIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is updated
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was updated</param>
        partial void AfterUpdateIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called before a ideatransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to add</param>
        partial void BeforeAddIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is added
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was added</param>
        partial void AfterAddIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called before a ideatransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to add</param>
        partial void BeforeDeleteIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is deleted
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was deleted</param>
        partial void AfterDeleteIdeaTransformer(dc.IdeaTransformer ideatransformer);
        /// <summary>
        /// Called before a appuser is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        partial void BeforeUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is updated
        /// </summary>
        /// <param name="appuser">The appuser which was updated</param>
        partial void AfterUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is added
        /// </summary>
        /// <param name="appuser">The appuser which was added</param>
        partial void AfterAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeDeleteAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is deleted
        /// </summary>
        /// <param name="appuser">The appuser which was deleted</param>
        partial void AfterDeleteAppUser(dc.AppUser appuser);
        /// <summary>
        /// Called before a generationtransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        partial void BeforeUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is updated
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was updated</param>
        partial void AfterUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is added
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was added</param>
        partial void AfterAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is deleted
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was deleted</param>
        partial void AfterDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);
        /// <summary>
        /// Called before a generation is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to update</param>
        partial void BeforeUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is updated
        /// </summary>
        /// <param name="generation">The generation which was updated</param>
        partial void AfterUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is added
        /// </summary>
        /// <param name="generation">The generation which was added</param>
        partial void AfterAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeDeleteGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is deleted
        /// </summary>
        /// <param name="generation">The generation which was deleted</param>
        partial void AfterDeleteGeneration(dc.Generation generation);
        /// <summary>
        /// Called before a ideafeature is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideafeature">The ideafeature to update</param>
        partial void BeforeUpdateIdeaFeature(dc.IdeaFeature ideafeature);

        /// <summary>
        /// Called after a ideafeature is updated
        /// </summary>
        /// <param name="ideafeature">The ideafeature which was updated</param>
        partial void AfterUpdateIdeaFeature(dc.IdeaFeature ideafeature);

        /// <summary>
        /// Called before a ideafeature is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideafeature">The ideafeature to add</param>
        partial void BeforeAddIdeaFeature(dc.IdeaFeature ideafeature);

        /// <summary>
        /// Called after a ideafeature is added
        /// </summary>
        /// <param name="ideafeature">The ideafeature which was added</param>
        partial void AfterAddIdeaFeature(dc.IdeaFeature ideafeature);

        /// <summary>
        /// Called before a ideafeature is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideafeature">The ideafeature to add</param>
        partial void BeforeDeleteIdeaFeature(dc.IdeaFeature ideafeature);

        /// <summary>
        /// Called after a ideafeature is deleted
        /// </summary>
        /// <param name="ideafeature">The ideafeature which was deleted</param>
        partial void AfterDeleteIdeaFeature(dc.IdeaFeature ideafeature);
        /// <summary>
        /// Called before a transformedartifact is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to update</param>
        partial void BeforeUpdateTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is updated
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was updated</param>
        partial void AfterUpdateTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called before a transformedartifact is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to add</param>
        partial void BeforeAddTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is added
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was added</param>
        partial void AfterAddTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called before a transformedartifact is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to add</param>
        partial void BeforeDeleteTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is deleted
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was deleted</param>
        partial void AfterDeleteTransformedArtifact(dc.TransformedArtifact transformedartifact);
        /// <summary>
        /// Called before a designdecision is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to update</param>
        partial void BeforeUpdateDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is updated
        /// </summary>
        /// <param name="designdecision">The designdecision which was updated</param>
        partial void AfterUpdateDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called before a designdecision is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to add</param>
        partial void BeforeAddDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is added
        /// </summary>
        /// <param name="designdecision">The designdecision which was added</param>
        partial void AfterAddDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called before a designdecision is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to add</param>
        partial void BeforeDeleteDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is deleted
        /// </summary>
        /// <param name="designdecision">The designdecision which was deleted</param>
        partial void AfterDeleteDesignDecision(dc.DesignDecision designdecision);
        /// <summary>
        /// Called before a llm is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to update</param>
        partial void BeforeUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is updated
        /// </summary>
        /// <param name="llm">The llm which was updated</param>
        partial void AfterUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeAddLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is added
        /// </summary>
        /// <param name="llm">The llm which was added</param>
        partial void AfterAddLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeDeleteLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is deleted
        /// </summary>
        /// <param name="llm">The llm which was deleted</param>
        partial void AfterDeleteLLM(dc.LLM llm);
        /// <summary>
        /// Called before a idea is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to update</param>
        partial void BeforeUpdateIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is updated
        /// </summary>
        /// <param name="idea">The idea which was updated</param>
        partial void AfterUpdateIdea(dc.Idea idea);

        /// <summary>
        /// Called before a idea is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to add</param>
        partial void BeforeAddIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is added
        /// </summary>
        /// <param name="idea">The idea which was added</param>
        partial void AfterAddIdea(dc.Idea idea);

        /// <summary>
        /// Called before a idea is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to add</param>
        partial void BeforeDeleteIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is deleted
        /// </summary>
        /// <param name="idea">The idea which was deleted</param>
        partial void AfterDeleteIdea(dc.Idea idea);

        /// <summary>
        /// Throw this exception to SKIP a CRUD operation like update, insert or delete
        /// </summary>
        public class SkipOperationException : Exception
        {
            public SkipOperationException()
            {
            }

            public SkipOperationException(string message) : base(message)
            {
            }

            public SkipOperationException(string message, Exception innerException) : base(message, innerException)
            {
            }

            protected SkipOperationException(SerializationInfo info, StreamingContext context) : base(info, context)
            {
            }
        }

        /// <summary>
        /// Returns a list of IdeaTransformers
        /// </summary>
        /// <param name="view">the specific view to pull IdeaTransformers from</param>
        /// <returns>The list of IdeaTransformers from the given view</returns>
        public IEnumerable<dc.IdeaTransformer> GetIdeaTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.IdeaTransformer>();
        }

        /// <summary>
        /// Update the given ideatransformer
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to update</param>
        public dc.IdeaTransformer Update(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeUpdateIdeaTransformer(ideatransformer);
                ideatransformer = this.UpdateAirtableRow<dc.IdeaTransformer>("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", ideatransformer);
                this.AfterUpdateIdeaTransformer(ideatransformer);
                return ideatransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given ideatransformer
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to delete</param>
        public void Delete(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeDeleteIdeaTransformer(ideatransformer);
                this.DeleteAirtableRow<dc.IdeaTransformer>("IdeaTransformers", ideatransformer);
                this.AfterDeleteIdeaTransformer(ideatransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new ideatransformer into the airtable
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.IdeaTransformer Insert(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeAddIdeaTransformer(ideatransformer);
                ideatransformer = base.AddAirtableRow<dc.IdeaTransformer>("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", ideatransformer);
                this.AfterAddIdeaTransformer(ideatransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return ideatransformer;
        }
        /// <summary>
        /// Returns a list of AppUsers
        /// </summary>
        /// <param name="view">the specific view to pull AppUsers from</param>
        /// <returns>The list of AppUsers from the given view</returns>
        public IEnumerable<dc.AppUser> GetAppUsers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("AppUser", "AppUsers", "AppUsers", where, view, maxPages);
            return rows.ConvertTo<dc.AppUser>();
        }

        /// <summary>
        /// Update the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        public dc.AppUser Update(dc.AppUser appuser)
        {
            try
            {
                this.BeforeUpdateAppUser(appuser);
                appuser = this.UpdateAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterUpdateAppUser(appuser);
                return appuser;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to delete</param>
        public void Delete(dc.AppUser appuser)
        {
            try
            {
                this.BeforeDeleteAppUser(appuser);
                this.DeleteAirtableRow<dc.AppUser>("AppUsers", appuser);
                this.AfterDeleteAppUser(appuser);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new appuser into the airtable
        /// </summary>
        /// <param name="appuser">The appuser to insert into the airtable</param>
        /// <returns></returns>
        public dc.AppUser Insert(dc.AppUser appuser)
        {
            try
            {
                this.BeforeAddAppUser(appuser);
                appuser = base.AddAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterAddAppUser(appuser);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return appuser;
        }
        /// <summary>
        /// Returns a list of GenerationTransformers
        /// </summary>
        /// <param name="view">the specific view to pull GenerationTransformers from</param>
        /// <returns>The list of GenerationTransformers from the given view</returns>
        public IEnumerable<dc.GenerationTransformer> GetGenerationTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.GenerationTransformer>();
        }

        /// <summary>
        /// Update the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        public dc.GenerationTransformer Update(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeUpdateGenerationTransformer(generationtransformer);
                generationtransformer = this.UpdateAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterUpdateGenerationTransformer(generationtransformer);
                return generationtransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to delete</param>
        public void Delete(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeDeleteGenerationTransformer(generationtransformer);
                this.DeleteAirtableRow<dc.GenerationTransformer>("GenerationTransformers", generationtransformer);
                this.AfterDeleteGenerationTransformer(generationtransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generationtransformer into the airtable
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.GenerationTransformer Insert(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeAddGenerationTransformer(generationtransformer);
                generationtransformer = base.AddAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterAddGenerationTransformer(generationtransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generationtransformer;
        }
        /// <summary>
        /// Returns a list of Generations
        /// </summary>
        /// <param name="view">the specific view to pull Generations from</param>
        /// <returns>The list of Generations from the given view</returns>
        public IEnumerable<dc.Generation> GetGenerations(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Generation", "Generations", "Generations", where, view, maxPages);
            return rows.ConvertTo<dc.Generation>();
        }

        /// <summary>
        /// Update the given generation
        /// </summary>
        /// <param name="generation">The generation to update</param>
        public dc.Generation Update(dc.Generation generation)
        {
            try
            {
                this.BeforeUpdateGeneration(generation);
                generation = this.UpdateAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterUpdateGeneration(generation);
                return generation;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generation
        /// </summary>
        /// <param name="generation">The generation to delete</param>
        public void Delete(dc.Generation generation)
        {
            try
            {
                this.BeforeDeleteGeneration(generation);
                this.DeleteAirtableRow<dc.Generation>("Generations", generation);
                this.AfterDeleteGeneration(generation);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generation into the airtable
        /// </summary>
        /// <param name="generation">The generation to insert into the airtable</param>
        /// <returns></returns>
        public dc.Generation Insert(dc.Generation generation)
        {
            try
            {
                this.BeforeAddGeneration(generation);
                generation = base.AddAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterAddGeneration(generation);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generation;
        }
        /// <summary>
        /// Returns a list of IdeaFeatures
        /// </summary>
        /// <param name="view">the specific view to pull IdeaFeatures from</param>
        /// <returns>The list of IdeaFeatures from the given view</returns>
        public IEnumerable<dc.IdeaFeature> GetIdeaFeatures(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("IdeaFeature", "IdeaFeatures", "IdeaFeatures", where, view, maxPages);
            return rows.ConvertTo<dc.IdeaFeature>();
        }

        /// <summary>
        /// Update the given ideafeature
        /// </summary>
        /// <param name="ideafeature">The ideafeature to update</param>
        public dc.IdeaFeature Update(dc.IdeaFeature ideafeature)
        {
            try
            {
                this.BeforeUpdateIdeaFeature(ideafeature);
                ideafeature = this.UpdateAirtableRow<dc.IdeaFeature>("IdeaFeature", "IdeaFeatures", "IdeaFeatures", ideafeature);
                this.AfterUpdateIdeaFeature(ideafeature);
                return ideafeature;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given ideafeature
        /// </summary>
        /// <param name="ideafeature">The ideafeature to delete</param>
        public void Delete(dc.IdeaFeature ideafeature)
        {
            try
            {
                this.BeforeDeleteIdeaFeature(ideafeature);
                this.DeleteAirtableRow<dc.IdeaFeature>("IdeaFeatures", ideafeature);
                this.AfterDeleteIdeaFeature(ideafeature);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new ideafeature into the airtable
        /// </summary>
        /// <param name="ideafeature">The ideafeature to insert into the airtable</param>
        /// <returns></returns>
        public dc.IdeaFeature Insert(dc.IdeaFeature ideafeature)
        {
            try
            {
                this.BeforeAddIdeaFeature(ideafeature);
                ideafeature = base.AddAirtableRow<dc.IdeaFeature>("IdeaFeature", "IdeaFeatures", "IdeaFeatures", ideafeature);
                this.AfterAddIdeaFeature(ideafeature);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return ideafeature;
        }
        /// <summary>
        /// Returns a list of TransformedArtifacts
        /// </summary>
        /// <param name="view">the specific view to pull TransformedArtifacts from</param>
        /// <returns>The list of TransformedArtifacts from the given view</returns>
        public IEnumerable<dc.TransformedArtifact> GetTransformedArtifacts(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", where, view, maxPages);
            return rows.ConvertTo<dc.TransformedArtifact>();
        }

        /// <summary>
        /// Update the given transformedartifact
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to update</param>
        public dc.TransformedArtifact Update(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeUpdateTransformedArtifact(transformedartifact);
                transformedartifact = this.UpdateAirtableRow<dc.TransformedArtifact>("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", transformedartifact);
                this.AfterUpdateTransformedArtifact(transformedartifact);
                return transformedartifact;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given transformedartifact
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to delete</param>
        public void Delete(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeDeleteTransformedArtifact(transformedartifact);
                this.DeleteAirtableRow<dc.TransformedArtifact>("TransformedArtifacts", transformedartifact);
                this.AfterDeleteTransformedArtifact(transformedartifact);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new transformedartifact into the airtable
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to insert into the airtable</param>
        /// <returns></returns>
        public dc.TransformedArtifact Insert(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeAddTransformedArtifact(transformedartifact);
                transformedartifact = base.AddAirtableRow<dc.TransformedArtifact>("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", transformedartifact);
                this.AfterAddTransformedArtifact(transformedartifact);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return transformedartifact;
        }
        /// <summary>
        /// Returns a list of DesignDecisions
        /// </summary>
        /// <param name="view">the specific view to pull DesignDecisions from</param>
        /// <returns>The list of DesignDecisions from the given view</returns>
        public IEnumerable<dc.DesignDecision> GetDesignDecisions(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("DesignDecision", "DesignDecisions", "DesignDecisions", where, view, maxPages);
            return rows.ConvertTo<dc.DesignDecision>();
        }

        /// <summary>
        /// Update the given designdecision
        /// </summary>
        /// <param name="designdecision">The designdecision to update</param>
        public dc.DesignDecision Update(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeUpdateDesignDecision(designdecision);
                designdecision = this.UpdateAirtableRow<dc.DesignDecision>("DesignDecision", "DesignDecisions", "DesignDecisions", designdecision);
                this.AfterUpdateDesignDecision(designdecision);
                return designdecision;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given designdecision
        /// </summary>
        /// <param name="designdecision">The designdecision to delete</param>
        public void Delete(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeDeleteDesignDecision(designdecision);
                this.DeleteAirtableRow<dc.DesignDecision>("DesignDecisions", designdecision);
                this.AfterDeleteDesignDecision(designdecision);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new designdecision into the airtable
        /// </summary>
        /// <param name="designdecision">The designdecision to insert into the airtable</param>
        /// <returns></returns>
        public dc.DesignDecision Insert(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeAddDesignDecision(designdecision);
                designdecision = base.AddAirtableRow<dc.DesignDecision>("DesignDecision", "DesignDecisions", "DesignDecisions", designdecision);
                this.AfterAddDesignDecision(designdecision);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return designdecision;
        }
        /// <summary>
        /// Returns a list of LLMs
        /// </summary>
        /// <param name="view">the specific view to pull LLMs from</param>
        /// <returns>The list of LLMs from the given view</returns>
        public IEnumerable<dc.LLM> GetLLMs(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("LLM", "LLMs", "LLMs", where, view, maxPages);
            return rows.ConvertTo<dc.LLM>();
        }

        /// <summary>
        /// Update the given llm
        /// </summary>
        /// <param name="llm">The llm to update</param>
        public dc.LLM Update(dc.LLM llm)
        {
            try
            {
                this.BeforeUpdateLLM(llm);
                llm = this.UpdateAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterUpdateLLM(llm);
                return llm;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given llm
        /// </summary>
        /// <param name="llm">The llm to delete</param>
        public void Delete(dc.LLM llm)
        {
            try
            {
                this.BeforeDeleteLLM(llm);
                this.DeleteAirtableRow<dc.LLM>("LLMs", llm);
                this.AfterDeleteLLM(llm);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new llm into the airtable
        /// </summary>
        /// <param name="llm">The llm to insert into the airtable</param>
        /// <returns></returns>
        public dc.LLM Insert(dc.LLM llm)
        {
            try
            {
                this.BeforeAddLLM(llm);
                llm = base.AddAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterAddLLM(llm);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return llm;
        }
        /// <summary>
        /// Returns a list of Ideas
        /// </summary>
        /// <param name="view">the specific view to pull Ideas from</param>
        /// <returns>The list of Ideas from the given view</returns>
        public IEnumerable<dc.Idea> GetIdeas(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Idea", "Ideas", "Ideas", where, view, maxPages);
            return rows.ConvertTo<dc.Idea>();
        }

        /// <summary>
        /// Update the given idea
        /// </summary>
        /// <param name="idea">The idea to update</param>
        public dc.Idea Update(dc.Idea idea)
        {
            try
            {
                this.BeforeUpdateIdea(idea);
                idea = this.UpdateAirtableRow<dc.Idea>("Idea", "Ideas", "Ideas", idea);
                this.AfterUpdateIdea(idea);
                return idea;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given idea
        /// </summary>
        /// <param name="idea">The idea to delete</param>
        public void Delete(dc.Idea idea)
        {
            try
            {
                this.BeforeDeleteIdea(idea);
                this.DeleteAirtableRow<dc.Idea>("Ideas", idea);
                this.AfterDeleteIdea(idea);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new idea into the airtable
        /// </summary>
        /// <param name="idea">The idea to insert into the airtable</param>
        /// <returns></returns>
        public dc.Idea Insert(dc.Idea idea)
        {
            try
            {
                this.BeforeAddIdea(idea);
                idea = base.AddAirtableRow<dc.Idea>("Idea", "Ideas", "Ideas", idea);
                this.AfterAddIdea(idea);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return idea;
        }
    }
}
