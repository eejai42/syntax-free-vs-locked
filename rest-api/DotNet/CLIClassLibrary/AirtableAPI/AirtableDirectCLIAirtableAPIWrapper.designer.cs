/*************************************************
AUTO Generated by SSoT.me - 2019
    EJ Alexandra - An airtable Tool
    DO NOT MAKE CHANGES TO THIS FILE - THEY WILL BE OVERWRITTEN
*************************************************/
using dc = AirtableDirect.CLI.Lib.DataClasses;
using SSoT.me.AirtableToDotNetLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace AirtableToDotNet.APIWrapper
{
    public partial class AirtableDirectCLIAirtableAPIWrapper : AirtableAPIWrapperBase
    {
        
        /// <summary>
        /// Called before a promptinputanswerkey is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to update</param>
        partial void BeforeUpdatePromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);

        /// <summary>
        /// Called after a promptinputanswerkey is updated
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey which was updated</param>
        partial void AfterUpdatePromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);

        /// <summary>
        /// Called before a promptinputanswerkey is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to add</param>
        partial void BeforeAddPromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);

        /// <summary>
        /// Called after a promptinputanswerkey is added
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey which was added</param>
        partial void AfterAddPromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);

        /// <summary>
        /// Called before a promptinputanswerkey is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to add</param>
        partial void BeforeDeletePromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);

        /// <summary>
        /// Called after a promptinputanswerkey is deleted
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey which was deleted</param>
        partial void AfterDeletePromptInputAnswerKey(dc.PromptInputAnswerKey promptinputanswerkey);
        /// <summary>
        /// Called before a generationtransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        partial void BeforeUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is updated
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was updated</param>
        partial void AfterUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is added
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was added</param>
        partial void AfterAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is deleted
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was deleted</param>
        partial void AfterDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);
        /// <summary>
        /// Called before a ideatransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to update</param>
        partial void BeforeUpdateIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is updated
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was updated</param>
        partial void AfterUpdateIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called before a ideatransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to add</param>
        partial void BeforeAddIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is added
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was added</param>
        partial void AfterAddIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called before a ideatransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to add</param>
        partial void BeforeDeleteIdeaTransformer(dc.IdeaTransformer ideatransformer);

        /// <summary>
        /// Called after a ideatransformer is deleted
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer which was deleted</param>
        partial void AfterDeleteIdeaTransformer(dc.IdeaTransformer ideatransformer);
        /// <summary>
        /// Called before a mofnode is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofnode">The mofnode to update</param>
        partial void BeforeUpdateMOFNode(dc.MOFNode mofnode);

        /// <summary>
        /// Called after a mofnode is updated
        /// </summary>
        /// <param name="mofnode">The mofnode which was updated</param>
        partial void AfterUpdateMOFNode(dc.MOFNode mofnode);

        /// <summary>
        /// Called before a mofnode is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofnode">The mofnode to add</param>
        partial void BeforeAddMOFNode(dc.MOFNode mofnode);

        /// <summary>
        /// Called after a mofnode is added
        /// </summary>
        /// <param name="mofnode">The mofnode which was added</param>
        partial void AfterAddMOFNode(dc.MOFNode mofnode);

        /// <summary>
        /// Called before a mofnode is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofnode">The mofnode to add</param>
        partial void BeforeDeleteMOFNode(dc.MOFNode mofnode);

        /// <summary>
        /// Called after a mofnode is deleted
        /// </summary>
        /// <param name="mofnode">The mofnode which was deleted</param>
        partial void AfterDeleteMOFNode(dc.MOFNode mofnode);
        /// <summary>
        /// Called before a mofchoice is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofchoice">The mofchoice to update</param>
        partial void BeforeUpdateMOFChoice(dc.MOFChoice mofchoice);

        /// <summary>
        /// Called after a mofchoice is updated
        /// </summary>
        /// <param name="mofchoice">The mofchoice which was updated</param>
        partial void AfterUpdateMOFChoice(dc.MOFChoice mofchoice);

        /// <summary>
        /// Called before a mofchoice is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofchoice">The mofchoice to add</param>
        partial void BeforeAddMOFChoice(dc.MOFChoice mofchoice);

        /// <summary>
        /// Called after a mofchoice is added
        /// </summary>
        /// <param name="mofchoice">The mofchoice which was added</param>
        partial void AfterAddMOFChoice(dc.MOFChoice mofchoice);

        /// <summary>
        /// Called before a mofchoice is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="mofchoice">The mofchoice to add</param>
        partial void BeforeDeleteMOFChoice(dc.MOFChoice mofchoice);

        /// <summary>
        /// Called after a mofchoice is deleted
        /// </summary>
        /// <param name="mofchoice">The mofchoice which was deleted</param>
        partial void AfterDeleteMOFChoice(dc.MOFChoice mofchoice);
        /// <summary>
        /// Called before a dataformat is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="dataformat">The dataformat to update</param>
        partial void BeforeUpdateDataFormat(dc.DataFormat dataformat);

        /// <summary>
        /// Called after a dataformat is updated
        /// </summary>
        /// <param name="dataformat">The dataformat which was updated</param>
        partial void AfterUpdateDataFormat(dc.DataFormat dataformat);

        /// <summary>
        /// Called before a dataformat is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="dataformat">The dataformat to add</param>
        partial void BeforeAddDataFormat(dc.DataFormat dataformat);

        /// <summary>
        /// Called after a dataformat is added
        /// </summary>
        /// <param name="dataformat">The dataformat which was added</param>
        partial void AfterAddDataFormat(dc.DataFormat dataformat);

        /// <summary>
        /// Called before a dataformat is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="dataformat">The dataformat to add</param>
        partial void BeforeDeleteDataFormat(dc.DataFormat dataformat);

        /// <summary>
        /// Called after a dataformat is deleted
        /// </summary>
        /// <param name="dataformat">The dataformat which was deleted</param>
        partial void AfterDeleteDataFormat(dc.DataFormat dataformat);
        /// <summary>
        /// Called before a generation is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to update</param>
        partial void BeforeUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is updated
        /// </summary>
        /// <param name="generation">The generation which was updated</param>
        partial void AfterUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is added
        /// </summary>
        /// <param name="generation">The generation which was added</param>
        partial void AfterAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeDeleteGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is deleted
        /// </summary>
        /// <param name="generation">The generation which was deleted</param>
        partial void AfterDeleteGeneration(dc.Generation generation);
        /// <summary>
        /// Called before a appuser is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        partial void BeforeUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is updated
        /// </summary>
        /// <param name="appuser">The appuser which was updated</param>
        partial void AfterUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is added
        /// </summary>
        /// <param name="appuser">The appuser which was added</param>
        partial void AfterAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeDeleteAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is deleted
        /// </summary>
        /// <param name="appuser">The appuser which was deleted</param>
        partial void AfterDeleteAppUser(dc.AppUser appuser);
        /// <summary>
        /// Called before a moflayer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="moflayer">The moflayer to update</param>
        partial void BeforeUpdateMOFLayer(dc.MOFLayer moflayer);

        /// <summary>
        /// Called after a moflayer is updated
        /// </summary>
        /// <param name="moflayer">The moflayer which was updated</param>
        partial void AfterUpdateMOFLayer(dc.MOFLayer moflayer);

        /// <summary>
        /// Called before a moflayer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="moflayer">The moflayer to add</param>
        partial void BeforeAddMOFLayer(dc.MOFLayer moflayer);

        /// <summary>
        /// Called after a moflayer is added
        /// </summary>
        /// <param name="moflayer">The moflayer which was added</param>
        partial void AfterAddMOFLayer(dc.MOFLayer moflayer);

        /// <summary>
        /// Called before a moflayer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="moflayer">The moflayer to add</param>
        partial void BeforeDeleteMOFLayer(dc.MOFLayer moflayer);

        /// <summary>
        /// Called after a moflayer is deleted
        /// </summary>
        /// <param name="moflayer">The moflayer which was deleted</param>
        partial void AfterDeleteMOFLayer(dc.MOFLayer moflayer);
        /// <summary>
        /// Called before a llm is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to update</param>
        partial void BeforeUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is updated
        /// </summary>
        /// <param name="llm">The llm which was updated</param>
        partial void AfterUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeAddLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is added
        /// </summary>
        /// <param name="llm">The llm which was added</param>
        partial void AfterAddLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeDeleteLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is deleted
        /// </summary>
        /// <param name="llm">The llm which was deleted</param>
        partial void AfterDeleteLLM(dc.LLM llm);
        /// <summary>
        /// Called before a outputformatrequest is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to update</param>
        partial void BeforeUpdateOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);

        /// <summary>
        /// Called after a outputformatrequest is updated
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest which was updated</param>
        partial void AfterUpdateOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);

        /// <summary>
        /// Called before a outputformatrequest is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to add</param>
        partial void BeforeAddOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);

        /// <summary>
        /// Called after a outputformatrequest is added
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest which was added</param>
        partial void AfterAddOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);

        /// <summary>
        /// Called before a outputformatrequest is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to add</param>
        partial void BeforeDeleteOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);

        /// <summary>
        /// Called after a outputformatrequest is deleted
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest which was deleted</param>
        partial void AfterDeleteOutputFormatRequest(dc.OutputFormatRequest outputformatrequest);
        /// <summary>
        /// Called before a transformedartifact is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to update</param>
        partial void BeforeUpdateTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is updated
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was updated</param>
        partial void AfterUpdateTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called before a transformedartifact is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to add</param>
        partial void BeforeAddTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is added
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was added</param>
        partial void AfterAddTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called before a transformedartifact is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to add</param>
        partial void BeforeDeleteTransformedArtifact(dc.TransformedArtifact transformedartifact);

        /// <summary>
        /// Called after a transformedartifact is deleted
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact which was deleted</param>
        partial void AfterDeleteTransformedArtifact(dc.TransformedArtifact transformedartifact);
        /// <summary>
        /// Called before a idea is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to update</param>
        partial void BeforeUpdateIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is updated
        /// </summary>
        /// <param name="idea">The idea which was updated</param>
        partial void AfterUpdateIdea(dc.Idea idea);

        /// <summary>
        /// Called before a idea is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to add</param>
        partial void BeforeAddIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is added
        /// </summary>
        /// <param name="idea">The idea which was added</param>
        partial void AfterAddIdea(dc.Idea idea);

        /// <summary>
        /// Called before a idea is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="idea">The idea to add</param>
        partial void BeforeDeleteIdea(dc.Idea idea);

        /// <summary>
        /// Called after a idea is deleted
        /// </summary>
        /// <param name="idea">The idea which was deleted</param>
        partial void AfterDeleteIdea(dc.Idea idea);

        /// <summary>
        /// Throw this exception to SKIP a CRUD operation like update, insert or delete
        /// </summary>
        public class SkipOperationException : Exception
        {
            public SkipOperationException()
            {
            }

            public SkipOperationException(string message) : base(message)
            {
            }

            public SkipOperationException(string message, Exception innerException) : base(message, innerException)
            {
            }

            protected SkipOperationException(SerializationInfo info, StreamingContext context) : base(info, context)
            {
            }
        }

        /// <summary>
        /// Returns a list of PromptInputAnswerKeies
        /// </summary>
        /// <param name="view">the specific view to pull PromptInputAnswerKeies from</param>
        /// <returns>The list of PromptInputAnswerKeies from the given view</returns>
        public IEnumerable<dc.PromptInputAnswerKey> GetPromptInputAnswerKeies(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("PromptInputAnswerKey", "PromptInputAnswerKeies", "PromptInputAnswerKeys", where, view, maxPages);
            return rows.ConvertTo<dc.PromptInputAnswerKey>();
        }

        /// <summary>
        /// Update the given promptinputanswerkey
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to update</param>
        public dc.PromptInputAnswerKey Update(dc.PromptInputAnswerKey promptinputanswerkey)
        {
            try
            {
                this.BeforeUpdatePromptInputAnswerKey(promptinputanswerkey);
                promptinputanswerkey = this.UpdateAirtableRow<dc.PromptInputAnswerKey>("PromptInputAnswerKey", "PromptInputAnswerKeies", "PromptInputAnswerKeys", promptinputanswerkey);
                this.AfterUpdatePromptInputAnswerKey(promptinputanswerkey);
                return promptinputanswerkey;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given promptinputanswerkey
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to delete</param>
        public void Delete(dc.PromptInputAnswerKey promptinputanswerkey)
        {
            try
            {
                this.BeforeDeletePromptInputAnswerKey(promptinputanswerkey);
                this.DeleteAirtableRow<dc.PromptInputAnswerKey>("PromptInputAnswerKeys", promptinputanswerkey);
                this.AfterDeletePromptInputAnswerKey(promptinputanswerkey);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new promptinputanswerkey into the airtable
        /// </summary>
        /// <param name="promptinputanswerkey">The promptinputanswerkey to insert into the airtable</param>
        /// <returns></returns>
        public dc.PromptInputAnswerKey Insert(dc.PromptInputAnswerKey promptinputanswerkey)
        {
            try
            {
                this.BeforeAddPromptInputAnswerKey(promptinputanswerkey);
                promptinputanswerkey = base.AddAirtableRow<dc.PromptInputAnswerKey>("PromptInputAnswerKey", "PromptInputAnswerKeies", "PromptInputAnswerKeys", promptinputanswerkey);
                this.AfterAddPromptInputAnswerKey(promptinputanswerkey);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return promptinputanswerkey;
        }
        /// <summary>
        /// Returns a list of GenerationTransformers
        /// </summary>
        /// <param name="view">the specific view to pull GenerationTransformers from</param>
        /// <returns>The list of GenerationTransformers from the given view</returns>
        public IEnumerable<dc.GenerationTransformer> GetGenerationTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.GenerationTransformer>();
        }

        /// <summary>
        /// Update the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        public dc.GenerationTransformer Update(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeUpdateGenerationTransformer(generationtransformer);
                generationtransformer = this.UpdateAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterUpdateGenerationTransformer(generationtransformer);
                return generationtransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to delete</param>
        public void Delete(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeDeleteGenerationTransformer(generationtransformer);
                this.DeleteAirtableRow<dc.GenerationTransformer>("GenerationTransformers", generationtransformer);
                this.AfterDeleteGenerationTransformer(generationtransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generationtransformer into the airtable
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.GenerationTransformer Insert(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeAddGenerationTransformer(generationtransformer);
                generationtransformer = base.AddAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterAddGenerationTransformer(generationtransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generationtransformer;
        }
        /// <summary>
        /// Returns a list of IdeaTransformers
        /// </summary>
        /// <param name="view">the specific view to pull IdeaTransformers from</param>
        /// <returns>The list of IdeaTransformers from the given view</returns>
        public IEnumerable<dc.IdeaTransformer> GetIdeaTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.IdeaTransformer>();
        }

        /// <summary>
        /// Update the given ideatransformer
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to update</param>
        public dc.IdeaTransformer Update(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeUpdateIdeaTransformer(ideatransformer);
                ideatransformer = this.UpdateAirtableRow<dc.IdeaTransformer>("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", ideatransformer);
                this.AfterUpdateIdeaTransformer(ideatransformer);
                return ideatransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given ideatransformer
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to delete</param>
        public void Delete(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeDeleteIdeaTransformer(ideatransformer);
                this.DeleteAirtableRow<dc.IdeaTransformer>("IdeaTransformers", ideatransformer);
                this.AfterDeleteIdeaTransformer(ideatransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new ideatransformer into the airtable
        /// </summary>
        /// <param name="ideatransformer">The ideatransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.IdeaTransformer Insert(dc.IdeaTransformer ideatransformer)
        {
            try
            {
                this.BeforeAddIdeaTransformer(ideatransformer);
                ideatransformer = base.AddAirtableRow<dc.IdeaTransformer>("IdeaTransformer", "IdeaTransformers", "IdeaTransformers", ideatransformer);
                this.AfterAddIdeaTransformer(ideatransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return ideatransformer;
        }
        /// <summary>
        /// Returns a list of MOFNodes
        /// </summary>
        /// <param name="view">the specific view to pull MOFNodes from</param>
        /// <returns>The list of MOFNodes from the given view</returns>
        public IEnumerable<dc.MOFNode> GetMOFNodes(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("MOFNode", "MOFNodes", "MOFNodes", where, view, maxPages);
            return rows.ConvertTo<dc.MOFNode>();
        }

        /// <summary>
        /// Update the given mofnode
        /// </summary>
        /// <param name="mofnode">The mofnode to update</param>
        public dc.MOFNode Update(dc.MOFNode mofnode)
        {
            try
            {
                this.BeforeUpdateMOFNode(mofnode);
                mofnode = this.UpdateAirtableRow<dc.MOFNode>("MOFNode", "MOFNodes", "MOFNodes", mofnode);
                this.AfterUpdateMOFNode(mofnode);
                return mofnode;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given mofnode
        /// </summary>
        /// <param name="mofnode">The mofnode to delete</param>
        public void Delete(dc.MOFNode mofnode)
        {
            try
            {
                this.BeforeDeleteMOFNode(mofnode);
                this.DeleteAirtableRow<dc.MOFNode>("MOFNodes", mofnode);
                this.AfterDeleteMOFNode(mofnode);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new mofnode into the airtable
        /// </summary>
        /// <param name="mofnode">The mofnode to insert into the airtable</param>
        /// <returns></returns>
        public dc.MOFNode Insert(dc.MOFNode mofnode)
        {
            try
            {
                this.BeforeAddMOFNode(mofnode);
                mofnode = base.AddAirtableRow<dc.MOFNode>("MOFNode", "MOFNodes", "MOFNodes", mofnode);
                this.AfterAddMOFNode(mofnode);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return mofnode;
        }
        /// <summary>
        /// Returns a list of MOFChoices
        /// </summary>
        /// <param name="view">the specific view to pull MOFChoices from</param>
        /// <returns>The list of MOFChoices from the given view</returns>
        public IEnumerable<dc.MOFChoice> GetMOFChoices(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("MOFChoice", "MOFChoices", "MOFChoices", where, view, maxPages);
            return rows.ConvertTo<dc.MOFChoice>();
        }

        /// <summary>
        /// Update the given mofchoice
        /// </summary>
        /// <param name="mofchoice">The mofchoice to update</param>
        public dc.MOFChoice Update(dc.MOFChoice mofchoice)
        {
            try
            {
                this.BeforeUpdateMOFChoice(mofchoice);
                mofchoice = this.UpdateAirtableRow<dc.MOFChoice>("MOFChoice", "MOFChoices", "MOFChoices", mofchoice);
                this.AfterUpdateMOFChoice(mofchoice);
                return mofchoice;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given mofchoice
        /// </summary>
        /// <param name="mofchoice">The mofchoice to delete</param>
        public void Delete(dc.MOFChoice mofchoice)
        {
            try
            {
                this.BeforeDeleteMOFChoice(mofchoice);
                this.DeleteAirtableRow<dc.MOFChoice>("MOFChoices", mofchoice);
                this.AfterDeleteMOFChoice(mofchoice);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new mofchoice into the airtable
        /// </summary>
        /// <param name="mofchoice">The mofchoice to insert into the airtable</param>
        /// <returns></returns>
        public dc.MOFChoice Insert(dc.MOFChoice mofchoice)
        {
            try
            {
                this.BeforeAddMOFChoice(mofchoice);
                mofchoice = base.AddAirtableRow<dc.MOFChoice>("MOFChoice", "MOFChoices", "MOFChoices", mofchoice);
                this.AfterAddMOFChoice(mofchoice);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return mofchoice;
        }
        /// <summary>
        /// Returns a list of DataFormats
        /// </summary>
        /// <param name="view">the specific view to pull DataFormats from</param>
        /// <returns>The list of DataFormats from the given view</returns>
        public IEnumerable<dc.DataFormat> GetDataFormats(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("DataFormat", "DataFormats", "DataFormats", where, view, maxPages);
            return rows.ConvertTo<dc.DataFormat>();
        }

        /// <summary>
        /// Update the given dataformat
        /// </summary>
        /// <param name="dataformat">The dataformat to update</param>
        public dc.DataFormat Update(dc.DataFormat dataformat)
        {
            try
            {
                this.BeforeUpdateDataFormat(dataformat);
                dataformat = this.UpdateAirtableRow<dc.DataFormat>("DataFormat", "DataFormats", "DataFormats", dataformat);
                this.AfterUpdateDataFormat(dataformat);
                return dataformat;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given dataformat
        /// </summary>
        /// <param name="dataformat">The dataformat to delete</param>
        public void Delete(dc.DataFormat dataformat)
        {
            try
            {
                this.BeforeDeleteDataFormat(dataformat);
                this.DeleteAirtableRow<dc.DataFormat>("DataFormats", dataformat);
                this.AfterDeleteDataFormat(dataformat);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new dataformat into the airtable
        /// </summary>
        /// <param name="dataformat">The dataformat to insert into the airtable</param>
        /// <returns></returns>
        public dc.DataFormat Insert(dc.DataFormat dataformat)
        {
            try
            {
                this.BeforeAddDataFormat(dataformat);
                dataformat = base.AddAirtableRow<dc.DataFormat>("DataFormat", "DataFormats", "DataFormats", dataformat);
                this.AfterAddDataFormat(dataformat);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return dataformat;
        }
        /// <summary>
        /// Returns a list of Generations
        /// </summary>
        /// <param name="view">the specific view to pull Generations from</param>
        /// <returns>The list of Generations from the given view</returns>
        public IEnumerable<dc.Generation> GetGenerations(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Generation", "Generations", "Generations", where, view, maxPages);
            return rows.ConvertTo<dc.Generation>();
        }

        /// <summary>
        /// Update the given generation
        /// </summary>
        /// <param name="generation">The generation to update</param>
        public dc.Generation Update(dc.Generation generation)
        {
            try
            {
                this.BeforeUpdateGeneration(generation);
                generation = this.UpdateAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterUpdateGeneration(generation);
                return generation;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generation
        /// </summary>
        /// <param name="generation">The generation to delete</param>
        public void Delete(dc.Generation generation)
        {
            try
            {
                this.BeforeDeleteGeneration(generation);
                this.DeleteAirtableRow<dc.Generation>("Generations", generation);
                this.AfterDeleteGeneration(generation);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generation into the airtable
        /// </summary>
        /// <param name="generation">The generation to insert into the airtable</param>
        /// <returns></returns>
        public dc.Generation Insert(dc.Generation generation)
        {
            try
            {
                this.BeforeAddGeneration(generation);
                generation = base.AddAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterAddGeneration(generation);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generation;
        }
        /// <summary>
        /// Returns a list of AppUsers
        /// </summary>
        /// <param name="view">the specific view to pull AppUsers from</param>
        /// <returns>The list of AppUsers from the given view</returns>
        public IEnumerable<dc.AppUser> GetAppUsers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("AppUser", "AppUsers", "AppUsers", where, view, maxPages);
            return rows.ConvertTo<dc.AppUser>();
        }

        /// <summary>
        /// Update the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        public dc.AppUser Update(dc.AppUser appuser)
        {
            try
            {
                this.BeforeUpdateAppUser(appuser);
                appuser = this.UpdateAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterUpdateAppUser(appuser);
                return appuser;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to delete</param>
        public void Delete(dc.AppUser appuser)
        {
            try
            {
                this.BeforeDeleteAppUser(appuser);
                this.DeleteAirtableRow<dc.AppUser>("AppUsers", appuser);
                this.AfterDeleteAppUser(appuser);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new appuser into the airtable
        /// </summary>
        /// <param name="appuser">The appuser to insert into the airtable</param>
        /// <returns></returns>
        public dc.AppUser Insert(dc.AppUser appuser)
        {
            try
            {
                this.BeforeAddAppUser(appuser);
                appuser = base.AddAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterAddAppUser(appuser);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return appuser;
        }
        /// <summary>
        /// Returns a list of MOFLayers
        /// </summary>
        /// <param name="view">the specific view to pull MOFLayers from</param>
        /// <returns>The list of MOFLayers from the given view</returns>
        public IEnumerable<dc.MOFLayer> GetMOFLayers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("MOFLayer", "MOFLayers", "MOFLayers", where, view, maxPages);
            return rows.ConvertTo<dc.MOFLayer>();
        }

        /// <summary>
        /// Update the given moflayer
        /// </summary>
        /// <param name="moflayer">The moflayer to update</param>
        public dc.MOFLayer Update(dc.MOFLayer moflayer)
        {
            try
            {
                this.BeforeUpdateMOFLayer(moflayer);
                moflayer = this.UpdateAirtableRow<dc.MOFLayer>("MOFLayer", "MOFLayers", "MOFLayers", moflayer);
                this.AfterUpdateMOFLayer(moflayer);
                return moflayer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given moflayer
        /// </summary>
        /// <param name="moflayer">The moflayer to delete</param>
        public void Delete(dc.MOFLayer moflayer)
        {
            try
            {
                this.BeforeDeleteMOFLayer(moflayer);
                this.DeleteAirtableRow<dc.MOFLayer>("MOFLayers", moflayer);
                this.AfterDeleteMOFLayer(moflayer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new moflayer into the airtable
        /// </summary>
        /// <param name="moflayer">The moflayer to insert into the airtable</param>
        /// <returns></returns>
        public dc.MOFLayer Insert(dc.MOFLayer moflayer)
        {
            try
            {
                this.BeforeAddMOFLayer(moflayer);
                moflayer = base.AddAirtableRow<dc.MOFLayer>("MOFLayer", "MOFLayers", "MOFLayers", moflayer);
                this.AfterAddMOFLayer(moflayer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return moflayer;
        }
        /// <summary>
        /// Returns a list of LLMs
        /// </summary>
        /// <param name="view">the specific view to pull LLMs from</param>
        /// <returns>The list of LLMs from the given view</returns>
        public IEnumerable<dc.LLM> GetLLMs(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("LLM", "LLMs", "LLMs", where, view, maxPages);
            return rows.ConvertTo<dc.LLM>();
        }

        /// <summary>
        /// Update the given llm
        /// </summary>
        /// <param name="llm">The llm to update</param>
        public dc.LLM Update(dc.LLM llm)
        {
            try
            {
                this.BeforeUpdateLLM(llm);
                llm = this.UpdateAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterUpdateLLM(llm);
                return llm;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given llm
        /// </summary>
        /// <param name="llm">The llm to delete</param>
        public void Delete(dc.LLM llm)
        {
            try
            {
                this.BeforeDeleteLLM(llm);
                this.DeleteAirtableRow<dc.LLM>("LLMs", llm);
                this.AfterDeleteLLM(llm);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new llm into the airtable
        /// </summary>
        /// <param name="llm">The llm to insert into the airtable</param>
        /// <returns></returns>
        public dc.LLM Insert(dc.LLM llm)
        {
            try
            {
                this.BeforeAddLLM(llm);
                llm = base.AddAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterAddLLM(llm);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return llm;
        }
        /// <summary>
        /// Returns a list of OutputFormatRequests
        /// </summary>
        /// <param name="view">the specific view to pull OutputFormatRequests from</param>
        /// <returns>The list of OutputFormatRequests from the given view</returns>
        public IEnumerable<dc.OutputFormatRequest> GetOutputFormatRequests(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("OutputFormatRequest", "OutputFormatRequests", "OutputFormatRequests", where, view, maxPages);
            return rows.ConvertTo<dc.OutputFormatRequest>();
        }

        /// <summary>
        /// Update the given outputformatrequest
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to update</param>
        public dc.OutputFormatRequest Update(dc.OutputFormatRequest outputformatrequest)
        {
            try
            {
                this.BeforeUpdateOutputFormatRequest(outputformatrequest);
                outputformatrequest = this.UpdateAirtableRow<dc.OutputFormatRequest>("OutputFormatRequest", "OutputFormatRequests", "OutputFormatRequests", outputformatrequest);
                this.AfterUpdateOutputFormatRequest(outputformatrequest);
                return outputformatrequest;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given outputformatrequest
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to delete</param>
        public void Delete(dc.OutputFormatRequest outputformatrequest)
        {
            try
            {
                this.BeforeDeleteOutputFormatRequest(outputformatrequest);
                this.DeleteAirtableRow<dc.OutputFormatRequest>("OutputFormatRequests", outputformatrequest);
                this.AfterDeleteOutputFormatRequest(outputformatrequest);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new outputformatrequest into the airtable
        /// </summary>
        /// <param name="outputformatrequest">The outputformatrequest to insert into the airtable</param>
        /// <returns></returns>
        public dc.OutputFormatRequest Insert(dc.OutputFormatRequest outputformatrequest)
        {
            try
            {
                this.BeforeAddOutputFormatRequest(outputformatrequest);
                outputformatrequest = base.AddAirtableRow<dc.OutputFormatRequest>("OutputFormatRequest", "OutputFormatRequests", "OutputFormatRequests", outputformatrequest);
                this.AfterAddOutputFormatRequest(outputformatrequest);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return outputformatrequest;
        }
        /// <summary>
        /// Returns a list of TransformedArtifacts
        /// </summary>
        /// <param name="view">the specific view to pull TransformedArtifacts from</param>
        /// <returns>The list of TransformedArtifacts from the given view</returns>
        public IEnumerable<dc.TransformedArtifact> GetTransformedArtifacts(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", where, view, maxPages);
            return rows.ConvertTo<dc.TransformedArtifact>();
        }

        /// <summary>
        /// Update the given transformedartifact
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to update</param>
        public dc.TransformedArtifact Update(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeUpdateTransformedArtifact(transformedartifact);
                transformedartifact = this.UpdateAirtableRow<dc.TransformedArtifact>("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", transformedartifact);
                this.AfterUpdateTransformedArtifact(transformedartifact);
                return transformedartifact;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given transformedartifact
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to delete</param>
        public void Delete(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeDeleteTransformedArtifact(transformedartifact);
                this.DeleteAirtableRow<dc.TransformedArtifact>("TransformedArtifacts", transformedartifact);
                this.AfterDeleteTransformedArtifact(transformedartifact);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new transformedartifact into the airtable
        /// </summary>
        /// <param name="transformedartifact">The transformedartifact to insert into the airtable</param>
        /// <returns></returns>
        public dc.TransformedArtifact Insert(dc.TransformedArtifact transformedartifact)
        {
            try
            {
                this.BeforeAddTransformedArtifact(transformedartifact);
                transformedartifact = base.AddAirtableRow<dc.TransformedArtifact>("TransformedArtifact", "TransformedArtifacts", "TransformedArtifacts", transformedartifact);
                this.AfterAddTransformedArtifact(transformedartifact);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return transformedartifact;
        }
        /// <summary>
        /// Returns a list of Ideas
        /// </summary>
        /// <param name="view">the specific view to pull Ideas from</param>
        /// <returns>The list of Ideas from the given view</returns>
        public IEnumerable<dc.Idea> GetIdeas(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Idea", "Ideas", "Ideas", where, view, maxPages);
            return rows.ConvertTo<dc.Idea>();
        }

        /// <summary>
        /// Update the given idea
        /// </summary>
        /// <param name="idea">The idea to update</param>
        public dc.Idea Update(dc.Idea idea)
        {
            try
            {
                this.BeforeUpdateIdea(idea);
                idea = this.UpdateAirtableRow<dc.Idea>("Idea", "Ideas", "Ideas", idea);
                this.AfterUpdateIdea(idea);
                return idea;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given idea
        /// </summary>
        /// <param name="idea">The idea to delete</param>
        public void Delete(dc.Idea idea)
        {
            try
            {
                this.BeforeDeleteIdea(idea);
                this.DeleteAirtableRow<dc.Idea>("Ideas", idea);
                this.AfterDeleteIdea(idea);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new idea into the airtable
        /// </summary>
        /// <param name="idea">The idea to insert into the airtable</param>
        /// <returns></returns>
        public dc.Idea Insert(dc.Idea idea)
        {
            try
            {
                this.BeforeAddIdea(idea);
                idea = base.AddAirtableRow<dc.Idea>("Idea", "Ideas", "Ideas", idea);
                this.AfterAddIdea(idea);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return idea;
        }
    }
}
