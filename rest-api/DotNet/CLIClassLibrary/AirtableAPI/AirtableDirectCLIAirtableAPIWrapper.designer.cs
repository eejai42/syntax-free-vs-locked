/*************************************************
AUTO Generated by SSoT.me - 2019
    EJ Alexandra - An airtable Tool
    DO NOT MAKE CHANGES TO THIS FILE - THEY WILL BE OVERWRITTEN
*************************************************/
using dc = AirtableDirect.CLI.Lib.DataClasses;
using SSoT.me.AirtableToDotNetLib;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace AirtableToDotNet.APIWrapper
{
    public partial class AirtableDirectCLIAirtableAPIWrapper : AirtableAPIWrapperBase
    {
        
        /// <summary>
        /// Called before a trialartifact is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trialartifact">The trialartifact to update</param>
        partial void BeforeUpdateTrialArtifact(dc.TrialArtifact trialartifact);

        /// <summary>
        /// Called after a trialartifact is updated
        /// </summary>
        /// <param name="trialartifact">The trialartifact which was updated</param>
        partial void AfterUpdateTrialArtifact(dc.TrialArtifact trialartifact);

        /// <summary>
        /// Called before a trialartifact is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trialartifact">The trialartifact to add</param>
        partial void BeforeAddTrialArtifact(dc.TrialArtifact trialartifact);

        /// <summary>
        /// Called after a trialartifact is added
        /// </summary>
        /// <param name="trialartifact">The trialartifact which was added</param>
        partial void AfterAddTrialArtifact(dc.TrialArtifact trialartifact);

        /// <summary>
        /// Called before a trialartifact is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trialartifact">The trialartifact to add</param>
        partial void BeforeDeleteTrialArtifact(dc.TrialArtifact trialartifact);

        /// <summary>
        /// Called after a trialartifact is deleted
        /// </summary>
        /// <param name="trialartifact">The trialartifact which was deleted</param>
        partial void AfterDeleteTrialArtifact(dc.TrialArtifact trialartifact);
        /// <summary>
        /// Called before a appuser is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        partial void BeforeUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is updated
        /// </summary>
        /// <param name="appuser">The appuser which was updated</param>
        partial void AfterUpdateAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is added
        /// </summary>
        /// <param name="appuser">The appuser which was added</param>
        partial void AfterAddAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called before a appuser is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="appuser">The appuser to add</param>
        partial void BeforeDeleteAppUser(dc.AppUser appuser);

        /// <summary>
        /// Called after a appuser is deleted
        /// </summary>
        /// <param name="appuser">The appuser which was deleted</param>
        partial void AfterDeleteAppUser(dc.AppUser appuser);
        /// <summary>
        /// Called before a generationtransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        partial void BeforeUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is updated
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was updated</param>
        partial void AfterUpdateGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is added
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was added</param>
        partial void AfterAddGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called before a generationtransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to add</param>
        partial void BeforeDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);

        /// <summary>
        /// Called after a generationtransformer is deleted
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer which was deleted</param>
        partial void AfterDeleteGenerationTransformer(dc.GenerationTransformer generationtransformer);
        /// <summary>
        /// Called before a generation is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to update</param>
        partial void BeforeUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is updated
        /// </summary>
        /// <param name="generation">The generation which was updated</param>
        partial void AfterUpdateGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is added
        /// </summary>
        /// <param name="generation">The generation which was added</param>
        partial void AfterAddGeneration(dc.Generation generation);

        /// <summary>
        /// Called before a generation is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="generation">The generation to add</param>
        partial void BeforeDeleteGeneration(dc.Generation generation);

        /// <summary>
        /// Called after a generation is deleted
        /// </summary>
        /// <param name="generation">The generation which was deleted</param>
        partial void AfterDeleteGeneration(dc.Generation generation);
        /// <summary>
        /// Called before a trial is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trial">The trial to update</param>
        partial void BeforeUpdateTrial(dc.Trial trial);

        /// <summary>
        /// Called after a trial is updated
        /// </summary>
        /// <param name="trial">The trial which was updated</param>
        partial void AfterUpdateTrial(dc.Trial trial);

        /// <summary>
        /// Called before a trial is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trial">The trial to add</param>
        partial void BeforeAddTrial(dc.Trial trial);

        /// <summary>
        /// Called after a trial is added
        /// </summary>
        /// <param name="trial">The trial which was added</param>
        partial void AfterAddTrial(dc.Trial trial);

        /// <summary>
        /// Called before a trial is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="trial">The trial to add</param>
        partial void BeforeDeleteTrial(dc.Trial trial);

        /// <summary>
        /// Called after a trial is deleted
        /// </summary>
        /// <param name="trial">The trial which was deleted</param>
        partial void AfterDeleteTrial(dc.Trial trial);
        /// <summary>
        /// Called before a artifactanalysi is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to update</param>
        partial void BeforeUpdateArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);

        /// <summary>
        /// Called after a artifactanalysi is updated
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi which was updated</param>
        partial void AfterUpdateArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);

        /// <summary>
        /// Called before a artifactanalysi is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to add</param>
        partial void BeforeAddArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);

        /// <summary>
        /// Called after a artifactanalysi is added
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi which was added</param>
        partial void AfterAddArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);

        /// <summary>
        /// Called before a artifactanalysi is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to add</param>
        partial void BeforeDeleteArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);

        /// <summary>
        /// Called after a artifactanalysi is deleted
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi which was deleted</param>
        partial void AfterDeleteArtifactAnalysi(dc.ArtifactAnalysi artifactanalysi);
        /// <summary>
        /// Called before a experimenttransformer is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to update</param>
        partial void BeforeUpdateExperimentTransformer(dc.ExperimentTransformer experimenttransformer);

        /// <summary>
        /// Called after a experimenttransformer is updated
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer which was updated</param>
        partial void AfterUpdateExperimentTransformer(dc.ExperimentTransformer experimenttransformer);

        /// <summary>
        /// Called before a experimenttransformer is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to add</param>
        partial void BeforeAddExperimentTransformer(dc.ExperimentTransformer experimenttransformer);

        /// <summary>
        /// Called after a experimenttransformer is added
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer which was added</param>
        partial void AfterAddExperimentTransformer(dc.ExperimentTransformer experimenttransformer);

        /// <summary>
        /// Called before a experimenttransformer is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to add</param>
        partial void BeforeDeleteExperimentTransformer(dc.ExperimentTransformer experimenttransformer);

        /// <summary>
        /// Called after a experimenttransformer is deleted
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer which was deleted</param>
        partial void AfterDeleteExperimentTransformer(dc.ExperimentTransformer experimenttransformer);
        /// <summary>
        /// Called before a experimentfeature is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to update</param>
        partial void BeforeUpdateExperimentFeature(dc.ExperimentFeature experimentfeature);

        /// <summary>
        /// Called after a experimentfeature is updated
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature which was updated</param>
        partial void AfterUpdateExperimentFeature(dc.ExperimentFeature experimentfeature);

        /// <summary>
        /// Called before a experimentfeature is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to add</param>
        partial void BeforeAddExperimentFeature(dc.ExperimentFeature experimentfeature);

        /// <summary>
        /// Called after a experimentfeature is added
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature which was added</param>
        partial void AfterAddExperimentFeature(dc.ExperimentFeature experimentfeature);

        /// <summary>
        /// Called before a experimentfeature is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to add</param>
        partial void BeforeDeleteExperimentFeature(dc.ExperimentFeature experimentfeature);

        /// <summary>
        /// Called after a experimentfeature is deleted
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature which was deleted</param>
        partial void AfterDeleteExperimentFeature(dc.ExperimentFeature experimentfeature);
        /// <summary>
        /// Called before a designdecision is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to update</param>
        partial void BeforeUpdateDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is updated
        /// </summary>
        /// <param name="designdecision">The designdecision which was updated</param>
        partial void AfterUpdateDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called before a designdecision is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to add</param>
        partial void BeforeAddDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is added
        /// </summary>
        /// <param name="designdecision">The designdecision which was added</param>
        partial void AfterAddDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called before a designdecision is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="designdecision">The designdecision to add</param>
        partial void BeforeDeleteDesignDecision(dc.DesignDecision designdecision);

        /// <summary>
        /// Called after a designdecision is deleted
        /// </summary>
        /// <param name="designdecision">The designdecision which was deleted</param>
        partial void AfterDeleteDesignDecision(dc.DesignDecision designdecision);
        /// <summary>
        /// Called before a experiment is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experiment">The experiment to update</param>
        partial void BeforeUpdateExperiment(dc.Experiment experiment);

        /// <summary>
        /// Called after a experiment is updated
        /// </summary>
        /// <param name="experiment">The experiment which was updated</param>
        partial void AfterUpdateExperiment(dc.Experiment experiment);

        /// <summary>
        /// Called before a experiment is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experiment">The experiment to add</param>
        partial void BeforeAddExperiment(dc.Experiment experiment);

        /// <summary>
        /// Called after a experiment is added
        /// </summary>
        /// <param name="experiment">The experiment which was added</param>
        partial void AfterAddExperiment(dc.Experiment experiment);

        /// <summary>
        /// Called before a experiment is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="experiment">The experiment to add</param>
        partial void BeforeDeleteExperiment(dc.Experiment experiment);

        /// <summary>
        /// Called after a experiment is deleted
        /// </summary>
        /// <param name="experiment">The experiment which was deleted</param>
        partial void AfterDeleteExperiment(dc.Experiment experiment);
        /// <summary>
        /// Called before a llm is updated.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to update</param>
        partial void BeforeUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is updated
        /// </summary>
        /// <param name="llm">The llm which was updated</param>
        partial void AfterUpdateLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is added.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeAddLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is added
        /// </summary>
        /// <param name="llm">The llm which was added</param>
        partial void AfterAddLLM(dc.LLM llm);

        /// <summary>
        /// Called before a llm is deleted.  Throw a SkipOperationException 
        /// if the update should not happen
        /// </summary>
        /// <param name="llm">The llm to add</param>
        partial void BeforeDeleteLLM(dc.LLM llm);

        /// <summary>
        /// Called after a llm is deleted
        /// </summary>
        /// <param name="llm">The llm which was deleted</param>
        partial void AfterDeleteLLM(dc.LLM llm);

        /// <summary>
        /// Throw this exception to SKIP a CRUD operation like update, insert or delete
        /// </summary>
        public class SkipOperationException : Exception
        {
            public SkipOperationException()
            {
            }

            public SkipOperationException(string message) : base(message)
            {
            }

            public SkipOperationException(string message, Exception innerException) : base(message, innerException)
            {
            }

            protected SkipOperationException(SerializationInfo info, StreamingContext context) : base(info, context)
            {
            }
        }

        /// <summary>
        /// Returns a list of TrialArtifacts
        /// </summary>
        /// <param name="view">the specific view to pull TrialArtifacts from</param>
        /// <returns>The list of TrialArtifacts from the given view</returns>
        public IEnumerable<dc.TrialArtifact> GetTrialArtifacts(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("TrialArtifact", "TrialArtifacts", "TrialArtifacts", where, view, maxPages);
            return rows.ConvertTo<dc.TrialArtifact>();
        }

        /// <summary>
        /// Update the given trialartifact
        /// </summary>
        /// <param name="trialartifact">The trialartifact to update</param>
        public dc.TrialArtifact Update(dc.TrialArtifact trialartifact)
        {
            try
            {
                this.BeforeUpdateTrialArtifact(trialartifact);
                trialartifact = this.UpdateAirtableRow<dc.TrialArtifact>("TrialArtifact", "TrialArtifacts", "TrialArtifacts", trialartifact);
                this.AfterUpdateTrialArtifact(trialartifact);
                return trialartifact;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given trialartifact
        /// </summary>
        /// <param name="trialartifact">The trialartifact to delete</param>
        public void Delete(dc.TrialArtifact trialartifact)
        {
            try
            {
                this.BeforeDeleteTrialArtifact(trialartifact);
                this.DeleteAirtableRow<dc.TrialArtifact>("TrialArtifacts", trialartifact);
                this.AfterDeleteTrialArtifact(trialartifact);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new trialartifact into the airtable
        /// </summary>
        /// <param name="trialartifact">The trialartifact to insert into the airtable</param>
        /// <returns></returns>
        public dc.TrialArtifact Insert(dc.TrialArtifact trialartifact)
        {
            try
            {
                this.BeforeAddTrialArtifact(trialartifact);
                trialartifact = base.AddAirtableRow<dc.TrialArtifact>("TrialArtifact", "TrialArtifacts", "TrialArtifacts", trialartifact);
                this.AfterAddTrialArtifact(trialartifact);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return trialartifact;
        }
        /// <summary>
        /// Returns a list of AppUsers
        /// </summary>
        /// <param name="view">the specific view to pull AppUsers from</param>
        /// <returns>The list of AppUsers from the given view</returns>
        public IEnumerable<dc.AppUser> GetAppUsers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("AppUser", "AppUsers", "AppUsers", where, view, maxPages);
            return rows.ConvertTo<dc.AppUser>();
        }

        /// <summary>
        /// Update the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to update</param>
        public dc.AppUser Update(dc.AppUser appuser)
        {
            try
            {
                this.BeforeUpdateAppUser(appuser);
                appuser = this.UpdateAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterUpdateAppUser(appuser);
                return appuser;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given appuser
        /// </summary>
        /// <param name="appuser">The appuser to delete</param>
        public void Delete(dc.AppUser appuser)
        {
            try
            {
                this.BeforeDeleteAppUser(appuser);
                this.DeleteAirtableRow<dc.AppUser>("AppUsers", appuser);
                this.AfterDeleteAppUser(appuser);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new appuser into the airtable
        /// </summary>
        /// <param name="appuser">The appuser to insert into the airtable</param>
        /// <returns></returns>
        public dc.AppUser Insert(dc.AppUser appuser)
        {
            try
            {
                this.BeforeAddAppUser(appuser);
                appuser = base.AddAirtableRow<dc.AppUser>("AppUser", "AppUsers", "AppUsers", appuser);
                this.AfterAddAppUser(appuser);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return appuser;
        }
        /// <summary>
        /// Returns a list of GenerationTransformers
        /// </summary>
        /// <param name="view">the specific view to pull GenerationTransformers from</param>
        /// <returns>The list of GenerationTransformers from the given view</returns>
        public IEnumerable<dc.GenerationTransformer> GetGenerationTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.GenerationTransformer>();
        }

        /// <summary>
        /// Update the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to update</param>
        public dc.GenerationTransformer Update(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeUpdateGenerationTransformer(generationtransformer);
                generationtransformer = this.UpdateAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterUpdateGenerationTransformer(generationtransformer);
                return generationtransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generationtransformer
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to delete</param>
        public void Delete(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeDeleteGenerationTransformer(generationtransformer);
                this.DeleteAirtableRow<dc.GenerationTransformer>("GenerationTransformers", generationtransformer);
                this.AfterDeleteGenerationTransformer(generationtransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generationtransformer into the airtable
        /// </summary>
        /// <param name="generationtransformer">The generationtransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.GenerationTransformer Insert(dc.GenerationTransformer generationtransformer)
        {
            try
            {
                this.BeforeAddGenerationTransformer(generationtransformer);
                generationtransformer = base.AddAirtableRow<dc.GenerationTransformer>("GenerationTransformer", "GenerationTransformers", "GenerationTransformers", generationtransformer);
                this.AfterAddGenerationTransformer(generationtransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generationtransformer;
        }
        /// <summary>
        /// Returns a list of Generations
        /// </summary>
        /// <param name="view">the specific view to pull Generations from</param>
        /// <returns>The list of Generations from the given view</returns>
        public IEnumerable<dc.Generation> GetGenerations(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Generation", "Generations", "Generations", where, view, maxPages);
            return rows.ConvertTo<dc.Generation>();
        }

        /// <summary>
        /// Update the given generation
        /// </summary>
        /// <param name="generation">The generation to update</param>
        public dc.Generation Update(dc.Generation generation)
        {
            try
            {
                this.BeforeUpdateGeneration(generation);
                generation = this.UpdateAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterUpdateGeneration(generation);
                return generation;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given generation
        /// </summary>
        /// <param name="generation">The generation to delete</param>
        public void Delete(dc.Generation generation)
        {
            try
            {
                this.BeforeDeleteGeneration(generation);
                this.DeleteAirtableRow<dc.Generation>("Generations", generation);
                this.AfterDeleteGeneration(generation);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new generation into the airtable
        /// </summary>
        /// <param name="generation">The generation to insert into the airtable</param>
        /// <returns></returns>
        public dc.Generation Insert(dc.Generation generation)
        {
            try
            {
                this.BeforeAddGeneration(generation);
                generation = base.AddAirtableRow<dc.Generation>("Generation", "Generations", "Generations", generation);
                this.AfterAddGeneration(generation);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return generation;
        }
        /// <summary>
        /// Returns a list of Trials
        /// </summary>
        /// <param name="view">the specific view to pull Trials from</param>
        /// <returns>The list of Trials from the given view</returns>
        public IEnumerable<dc.Trial> GetTrials(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Trial", "Trials", "Trials", where, view, maxPages);
            return rows.ConvertTo<dc.Trial>();
        }

        /// <summary>
        /// Update the given trial
        /// </summary>
        /// <param name="trial">The trial to update</param>
        public dc.Trial Update(dc.Trial trial)
        {
            try
            {
                this.BeforeUpdateTrial(trial);
                trial = this.UpdateAirtableRow<dc.Trial>("Trial", "Trials", "Trials", trial);
                this.AfterUpdateTrial(trial);
                return trial;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given trial
        /// </summary>
        /// <param name="trial">The trial to delete</param>
        public void Delete(dc.Trial trial)
        {
            try
            {
                this.BeforeDeleteTrial(trial);
                this.DeleteAirtableRow<dc.Trial>("Trials", trial);
                this.AfterDeleteTrial(trial);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new trial into the airtable
        /// </summary>
        /// <param name="trial">The trial to insert into the airtable</param>
        /// <returns></returns>
        public dc.Trial Insert(dc.Trial trial)
        {
            try
            {
                this.BeforeAddTrial(trial);
                trial = base.AddAirtableRow<dc.Trial>("Trial", "Trials", "Trials", trial);
                this.AfterAddTrial(trial);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return trial;
        }
        /// <summary>
        /// Returns a list of ArtifactAnalysis
        /// </summary>
        /// <param name="view">the specific view to pull ArtifactAnalysis from</param>
        /// <returns>The list of ArtifactAnalysis from the given view</returns>
        public IEnumerable<dc.ArtifactAnalysi> GetArtifactAnalysis(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("ArtifactAnalysi", "ArtifactAnalysis", "ArtifactAnalysis", where, view, maxPages);
            return rows.ConvertTo<dc.ArtifactAnalysi>();
        }

        /// <summary>
        /// Update the given artifactanalysi
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to update</param>
        public dc.ArtifactAnalysi Update(dc.ArtifactAnalysi artifactanalysi)
        {
            try
            {
                this.BeforeUpdateArtifactAnalysi(artifactanalysi);
                artifactanalysi = this.UpdateAirtableRow<dc.ArtifactAnalysi>("ArtifactAnalysi", "ArtifactAnalysis", "ArtifactAnalysis", artifactanalysi);
                this.AfterUpdateArtifactAnalysi(artifactanalysi);
                return artifactanalysi;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given artifactanalysi
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to delete</param>
        public void Delete(dc.ArtifactAnalysi artifactanalysi)
        {
            try
            {
                this.BeforeDeleteArtifactAnalysi(artifactanalysi);
                this.DeleteAirtableRow<dc.ArtifactAnalysi>("ArtifactAnalysis", artifactanalysi);
                this.AfterDeleteArtifactAnalysi(artifactanalysi);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new artifactanalysi into the airtable
        /// </summary>
        /// <param name="artifactanalysi">The artifactanalysi to insert into the airtable</param>
        /// <returns></returns>
        public dc.ArtifactAnalysi Insert(dc.ArtifactAnalysi artifactanalysi)
        {
            try
            {
                this.BeforeAddArtifactAnalysi(artifactanalysi);
                artifactanalysi = base.AddAirtableRow<dc.ArtifactAnalysi>("ArtifactAnalysi", "ArtifactAnalysis", "ArtifactAnalysis", artifactanalysi);
                this.AfterAddArtifactAnalysi(artifactanalysi);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return artifactanalysi;
        }
        /// <summary>
        /// Returns a list of ExperimentTransformers
        /// </summary>
        /// <param name="view">the specific view to pull ExperimentTransformers from</param>
        /// <returns>The list of ExperimentTransformers from the given view</returns>
        public IEnumerable<dc.ExperimentTransformer> GetExperimentTransformers(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("ExperimentTransformer", "ExperimentTransformers", "ExperimentTransformers", where, view, maxPages);
            return rows.ConvertTo<dc.ExperimentTransformer>();
        }

        /// <summary>
        /// Update the given experimenttransformer
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to update</param>
        public dc.ExperimentTransformer Update(dc.ExperimentTransformer experimenttransformer)
        {
            try
            {
                this.BeforeUpdateExperimentTransformer(experimenttransformer);
                experimenttransformer = this.UpdateAirtableRow<dc.ExperimentTransformer>("ExperimentTransformer", "ExperimentTransformers", "ExperimentTransformers", experimenttransformer);
                this.AfterUpdateExperimentTransformer(experimenttransformer);
                return experimenttransformer;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given experimenttransformer
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to delete</param>
        public void Delete(dc.ExperimentTransformer experimenttransformer)
        {
            try
            {
                this.BeforeDeleteExperimentTransformer(experimenttransformer);
                this.DeleteAirtableRow<dc.ExperimentTransformer>("ExperimentTransformers", experimenttransformer);
                this.AfterDeleteExperimentTransformer(experimenttransformer);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new experimenttransformer into the airtable
        /// </summary>
        /// <param name="experimenttransformer">The experimenttransformer to insert into the airtable</param>
        /// <returns></returns>
        public dc.ExperimentTransformer Insert(dc.ExperimentTransformer experimenttransformer)
        {
            try
            {
                this.BeforeAddExperimentTransformer(experimenttransformer);
                experimenttransformer = base.AddAirtableRow<dc.ExperimentTransformer>("ExperimentTransformer", "ExperimentTransformers", "ExperimentTransformers", experimenttransformer);
                this.AfterAddExperimentTransformer(experimenttransformer);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return experimenttransformer;
        }
        /// <summary>
        /// Returns a list of ExperimentFeatures
        /// </summary>
        /// <param name="view">the specific view to pull ExperimentFeatures from</param>
        /// <returns>The list of ExperimentFeatures from the given view</returns>
        public IEnumerable<dc.ExperimentFeature> GetExperimentFeatures(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("ExperimentFeature", "ExperimentFeatures", "ExperimentFeatures", where, view, maxPages);
            return rows.ConvertTo<dc.ExperimentFeature>();
        }

        /// <summary>
        /// Update the given experimentfeature
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to update</param>
        public dc.ExperimentFeature Update(dc.ExperimentFeature experimentfeature)
        {
            try
            {
                this.BeforeUpdateExperimentFeature(experimentfeature);
                experimentfeature = this.UpdateAirtableRow<dc.ExperimentFeature>("ExperimentFeature", "ExperimentFeatures", "ExperimentFeatures", experimentfeature);
                this.AfterUpdateExperimentFeature(experimentfeature);
                return experimentfeature;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given experimentfeature
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to delete</param>
        public void Delete(dc.ExperimentFeature experimentfeature)
        {
            try
            {
                this.BeforeDeleteExperimentFeature(experimentfeature);
                this.DeleteAirtableRow<dc.ExperimentFeature>("ExperimentFeatures", experimentfeature);
                this.AfterDeleteExperimentFeature(experimentfeature);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new experimentfeature into the airtable
        /// </summary>
        /// <param name="experimentfeature">The experimentfeature to insert into the airtable</param>
        /// <returns></returns>
        public dc.ExperimentFeature Insert(dc.ExperimentFeature experimentfeature)
        {
            try
            {
                this.BeforeAddExperimentFeature(experimentfeature);
                experimentfeature = base.AddAirtableRow<dc.ExperimentFeature>("ExperimentFeature", "ExperimentFeatures", "ExperimentFeatures", experimentfeature);
                this.AfterAddExperimentFeature(experimentfeature);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return experimentfeature;
        }
        /// <summary>
        /// Returns a list of DesignDecisions
        /// </summary>
        /// <param name="view">the specific view to pull DesignDecisions from</param>
        /// <returns>The list of DesignDecisions from the given view</returns>
        public IEnumerable<dc.DesignDecision> GetDesignDecisions(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("DesignDecision", "DesignDecisions", "DesignDecisions", where, view, maxPages);
            return rows.ConvertTo<dc.DesignDecision>();
        }

        /// <summary>
        /// Update the given designdecision
        /// </summary>
        /// <param name="designdecision">The designdecision to update</param>
        public dc.DesignDecision Update(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeUpdateDesignDecision(designdecision);
                designdecision = this.UpdateAirtableRow<dc.DesignDecision>("DesignDecision", "DesignDecisions", "DesignDecisions", designdecision);
                this.AfterUpdateDesignDecision(designdecision);
                return designdecision;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given designdecision
        /// </summary>
        /// <param name="designdecision">The designdecision to delete</param>
        public void Delete(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeDeleteDesignDecision(designdecision);
                this.DeleteAirtableRow<dc.DesignDecision>("DesignDecisions", designdecision);
                this.AfterDeleteDesignDecision(designdecision);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new designdecision into the airtable
        /// </summary>
        /// <param name="designdecision">The designdecision to insert into the airtable</param>
        /// <returns></returns>
        public dc.DesignDecision Insert(dc.DesignDecision designdecision)
        {
            try
            {
                this.BeforeAddDesignDecision(designdecision);
                designdecision = base.AddAirtableRow<dc.DesignDecision>("DesignDecision", "DesignDecisions", "DesignDecisions", designdecision);
                this.AfterAddDesignDecision(designdecision);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return designdecision;
        }
        /// <summary>
        /// Returns a list of Experiments
        /// </summary>
        /// <param name="view">the specific view to pull Experiments from</param>
        /// <returns>The list of Experiments from the given view</returns>
        public IEnumerable<dc.Experiment> GetExperiments(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("Experiment", "Experiments", "Experiments", where, view, maxPages);
            return rows.ConvertTo<dc.Experiment>();
        }

        /// <summary>
        /// Update the given experiment
        /// </summary>
        /// <param name="experiment">The experiment to update</param>
        public dc.Experiment Update(dc.Experiment experiment)
        {
            try
            {
                this.BeforeUpdateExperiment(experiment);
                experiment = this.UpdateAirtableRow<dc.Experiment>("Experiment", "Experiments", "Experiments", experiment);
                this.AfterUpdateExperiment(experiment);
                return experiment;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given experiment
        /// </summary>
        /// <param name="experiment">The experiment to delete</param>
        public void Delete(dc.Experiment experiment)
        {
            try
            {
                this.BeforeDeleteExperiment(experiment);
                this.DeleteAirtableRow<dc.Experiment>("Experiments", experiment);
                this.AfterDeleteExperiment(experiment);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new experiment into the airtable
        /// </summary>
        /// <param name="experiment">The experiment to insert into the airtable</param>
        /// <returns></returns>
        public dc.Experiment Insert(dc.Experiment experiment)
        {
            try
            {
                this.BeforeAddExperiment(experiment);
                experiment = base.AddAirtableRow<dc.Experiment>("Experiment", "Experiments", "Experiments", experiment);
                this.AfterAddExperiment(experiment);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return experiment;
        }
        /// <summary>
        /// Returns a list of LLMs
        /// </summary>
        /// <param name="view">the specific view to pull LLMs from</param>
        /// <returns>The list of LLMs from the given view</returns>
        public IEnumerable<dc.LLM> GetLLMs(String where = "", String view = "", int maxPages = 5)
        {
            var rows = this.GetTableAsAirtableRows("LLM", "LLMs", "LLMs", where, view, maxPages);
            return rows.ConvertTo<dc.LLM>();
        }

        /// <summary>
        /// Update the given llm
        /// </summary>
        /// <param name="llm">The llm to update</param>
        public dc.LLM Update(dc.LLM llm)
        {
            try
            {
                this.BeforeUpdateLLM(llm);
                llm = this.UpdateAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterUpdateLLM(llm);
                return llm;
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
            return null;
        }

        /// <summary>
        /// Delete the given llm
        /// </summary>
        /// <param name="llm">The llm to delete</param>
        public void Delete(dc.LLM llm)
        {
            try
            {
                this.BeforeDeleteLLM(llm);
                this.DeleteAirtableRow<dc.LLM>("LLMs", llm);
                this.AfterDeleteLLM(llm);
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }
        }

        /// <summary>
        /// Insert a new llm into the airtable
        /// </summary>
        /// <param name="llm">The llm to insert into the airtable</param>
        /// <returns></returns>
        public dc.LLM Insert(dc.LLM llm)
        {
            try
            {
                this.BeforeAddLLM(llm);
                llm = base.AddAirtableRow<dc.LLM>("LLM", "LLMs", "LLMs", llm);
                this.AfterAddLLM(llm);                
            }
            catch (SkipOperationException soe)
            {
                // Ignore soe exceptions
                // Console.WriteLine("Ignoring: {0}", soe.Message);
            }

            return llm;
        }
    }
}
