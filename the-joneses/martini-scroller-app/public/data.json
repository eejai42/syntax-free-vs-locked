{
  "story": {
    "title": "Meet the Joneses",
    "keywords": [
      {
        "name": "Charlie",
        "greek": "Τσάρλι",
        "chinese": "查理"
      },
      {
        "name": "Alice",
        "greek": "Άλις",
        "chinese": "艾丽丝"
      },
      {
        "name": "Bob",
        "replace-with": "Markus",
        "greek": "Μπομπ",
        "chinese": "鲍勃"
      },
      {
        "name": "Dingo",
        "greek": "Ντίνγκο",
        "chinese": "丁戈"
      },
      {
        "name": "Frank",
        "greek": "Φρανκ",
        "chinese": "弗兰克"
      },
      {
        "name": "Markus",
        "greek": "Markus",
        "chinese": "Markus"
      }
    ],
    "languages": [
      {
        "name": "English"
      },
      {
        "name": "Code"
      },
      {
        "name": "Chinese"
      },
      {
        "name": "Spanish"
      },
      {
        "name": "Greek"
      }
    ],
    "communication-methods": [
      "Specification",
      "Specification",
      "Specification",
      "Specification",
      "Documentation",
      "Documentation",
      "Documentation",
      "Documentation",
      "Documentation",
      "Proposal",
      "Proposal",
      "Proposal",
      "Proposal",
      "Proposal",
      "Change Request",
      "Change Request",
      "Change Request",
      "Change Request",
      "Change Request",
      "Meeting Minutes",
      "Meeting Minutes",
      "Meeting Agenda",
      "Meeting Agenda",
      "Meeting Agenda",
      "Meeting transcript",
      "Meeting transcript",
      "Meeting transcript",
      "Meeting transcript",
      "Meeting transcript",
      "Meeting recording",
      "Meeting recording",
      "Meeting recording",
      "Meeting recording",
      "Meeting recording",
      "Meeting recording",
      "Meeting notes",
      "Meeting action items",
      "Meeting notes",
      "Meeting notes",
      "Meeting action items",
      "Meeting action items",
      "Meeting action items",
      "Email",
      "Email",
      "Email",
      "Email",
      "Text/WhatsApp",
      "Slack/Discord",
      "Telephone",
      "Face to Face",
      "Video Call",
      "Chat",
      "Meeting",
      "Conference"
    ],
    "chapters": [
      {
        "name": "Meet the Joneses",
        "hint": "The Family",
        "statement": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
        "id": "meet-the-joneses",
        "image": "glasses/meet-the-joneses.png",
        "intro": "Today I'd like to introduce you to the notion of Syntax-Locking, and how, like paper-based businesses in the 80's and early 90's, if your business decisions are still syntax-locked, then even the *very* short story that we're about to explore together will likely ring true for you.",
        "syntax-locked-intro": "Specifically - if the details of your projects are still locked in syntax, for even a simple story like this one sentence summary of the Jones Family, then you're likely to be experiencing the same problems that we are about to explore, as the Jones family grows, changes & evolves over time. The reason for this pain (as you will hopefully see) is that syntax-locking is an expensive and generally inefficient way to record and communicate the details of even a simple story like this. Let's explore what happens when we avoid this pain by moving away from syntax-locking, and towards a world where the key elements of your business and projects are captured free from syntax.",
        "syntax-free-intro": "Here, for example, you'll notice that the syntax-free Mirror of the Jones family on the right, contains just 1 Charlie - so it's charlie counter is still 1.  All of the counters are actually still 1.  And they will remain 1 for as long as is is involved.  Because there's just 1 Charlie.  Always, just 1 Charlie.",
        "mantra": "So the specific cause of the pain from syntax-locking is the fact that the Charlie counter is already at #charlieCounter#, and counting... and it will just keep going up, unrelentingly - over time, especially as the project grows in size and complexity.",
        "languages": {
          "English": {
            "text-align": "left",
            "english_text": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
            "max-height": "10em",
            "variations": [
              "Project Proposal: \nOur project focuses on the dynamic between Charlie and his pet Dingo, a white, fluffy dog. It will also include interactions with his parents, Alice and Bob Jones, to provide a complete family perspective.",
              "Statement of Work - SOW 1033: \nThe work involves enhancing the living space for Charlie and Dingo, his white and fluffy canine. Additionally, the needs of Charlie's parents, Alice and Bob Jones, will be addressed.",
              "Specification: \nThe design caters to children like Charlie and pets similar to his dog, Dingo, a fluffy white canine. It's also user-friendly for adults, considering the needs of Alice and Bob Jones.",
              "Change Request: \nThis amendment adds a pet care section, inspired by Charlie and his dog Dingo. This update aims to benefit families with pets, like Charlie and his parents, Alice and Bob Jones.",
              "README: \nThis app is tailored for families, focusing on young users like Charlie and pet owners with dogs like Dingo, his white and fluffy companion. It also offers features for parents, keeping Alice and Bob Jones in mind.",
              "Release Notes: \nThe latest update introduces features for pet owners, inspired by Charlie and his dog Dingo. It enhances the experience for all family members, including parents like Alice and Bob Jones.",
              "Game Docs: \nInstructions are provided for young users like Charlie and pet owners with dogs such as Dingo, a fluffy white canine. The document also guides adult users, akin to Alice and Bob Jones.",
              "Service FAQ: \nQ: Is this service suitable for families with pets? \nA: Yes, it's ideal for families with a child like Charlie and a pet dog like Dingo, his white, fluffy companion, along with parents similar to Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "max-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "There's Just 1 Charlie!",
        "statement": "There's just 1 Alice, 1 Bob, 1 Charlie, and 1 Dingo. \n\nYou wouldn't know from the syntax-locked text though",
        "hint": "There's just 1 Charlie!",
        "id": "just-1-charlie",
        "image": "glasses/1.png",
        "intro": "So, even though there's always just 1 charlie in reality, the charlie counter in meeting notes, proposals, specifications, documentation, in team communications, outside communications, slack, discord, whatsapp, sms, in person meetings, and so on... All just opportunities for there to be misunderstandings and ambiguity.",
        "syntax-locked-intro": "On the syntax locked side, whether it's in English... Code... or Chinese..., all of the counters keep going up. Every time a new syntax locked artifact is created, the counters go up.  Hopefully none of them ever change their names.  Can you imagine what would happen if literally any of them ever changed their name?",
        "syntax-free-intro": "By contrast, you'll notice that the syntax-free Mirror of the Jones family sort of looks like a martini glass, and still contains just 1 Charlie, therefore it's charlie counter is still 1. Because there's just 1 charlie.",
        "mantra": "But... the Charlie Counter on the left just keeps going up.  it is just merciless. so we're like 2 minutes into this demo, and the Charlie counter is already at #charlieCounter# and counting... and it will just keep going up, unrelentingly.",
        "languages": {
          "English": {
            "text-align": "left",
            "max-height": "10em",
            "min-height": "10em",
            "variations": [
              "Project Proposal: \nOur project focuses on the dynamic between Charlie and his pet Dingo, a white, fluffy dog. It will also include interactions with his parents, Alice and Bob Jones, to provide a complete family perspective.",
              "Statement of Work - SOW 1033: \nThe work involves enhancing the living space for Charlie and Dingo, his white and fluffy canine. Additionally, the needs of Charlie's parents, Alice and Bob Jones, will be addressed.",
              "Specification: \nThe design caters to children like Charlie and pets similar to his dog, Dingo, a fluffy white canine. It's also user-friendly for adults, considering the needs of Alice and Bob Jones.",
              "Change Request: \nThis amendment adds a pet care section, inspired by Charlie and his dog Dingo. This update aims to benefit families with pets, like Charlie and his parents, Alice and Bob Jones.",
              "README: \nThis app is tailored for families, focusing on young users like Charlie and pet owners with dogs like Dingo, his white and fluffy companion. It also offers features for parents, keeping Alice and Bob Jones in mind.",
              "Release Notes: \nThe latest update introduces features for pet owners, inspired by Charlie and his dog Dingo. It enhances the experience for all family members, including parents like Alice and Bob Jones.",
              "Game Docs: \nInstructions are provided for young users like Charlie and pet owners with dogs such as Dingo, a fluffy white canine. The document also guides adult users, akin to Alice and Bob Jones.",
              "Service FAQ: \nQ: Is this service suitable for families with pets? \nA: Yes, it's ideal for families with a child like Charlie and a pet dog like Dingo, his white, fluffy companion, along with parents similar to Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "Charlie got Dingo for his 12th birthday!",
        "statement": "Charlie, got a white, fluffy dog named Dingo, for his 12th birthday!",
        "hint": "Dingo Was a Birthday Present",
        "id": "birthday-present",
        "image": "glasses/2.png",
        "intro": "So, when we learn something new, like the fact that Charlie got Dingo for his 12th birthday, this just complicates things...",
        "syntax-locked-intro": "Especially on the syntax locked side of things, all those previous references to Charlie and Dingo are now stale, because at least some of them should probably include the key piece of information about his birthday.  But until that new information is decided on, documented, communicated to whoever needs to update the syntax-locked document, and it is updated - it will just be out of date, stale, and very possibly, just wrong. So Despite just learning one small new detail about the relationship between Charlie and his Dog... that has to be documented and communicated to the whole team.",
        "syntax-free-intro": "By contrast, you'll notice that despite adding new meta data to the knowledge graph, the syntax-free Mirror of the Jones family still contains just 1 Charlie - so it's charlie counter is still 1.  Because, there is just one Charlie.  And yet, the Charlie Counter on the left just keeps going up. it is inexorable.",
        "mantra": "So we're like 3 minutes into this demo now, and the Charlie counter is already at #charlieCounter# and counting... and it will just keep going up, it just never tires.",
        "languages": {
          "English": {
            "min-height": "10em",
            "variations": [
              "Project Proposal: \nOur project celebrates the special bond between Charlie and his 12th birthday gift, Dingo, a white, fluffy dog. This narrative also encompasses the family dynamic with his parents, Alice and Bob Jones, enriching the story with a complete family perspective.",
              "Statement of Work - SOW 1033: \nThe work involves creating an engaging environment for Charlie and his 12th birthday gift, Dingo, his white and fluffy canine companion. The project also considers the needs of Charlie's parents, Alice and Bob Jones, to create a holistic family environment.",
              "Specification: \nThe design is centered around children like Charlie and their special pets, particularly inspired by Charlie's 12th birthday gift, Dingo, a fluffy white canine. The specification is also user-friendly for adults, taking into account the preferences of Alice and Bob Jones.",
              "Change Request: \nThis amendment incorporates a pet care section, inspired by Charlie's 12th birthday and his special bond with his dog Dingo. The update is aimed to resonate with families with pets, similar to Charlie and his parents, Alice and Bob Jones.",
              "README: \nThis app is designed for families, focusing on young users like Charlie who celebrated his 12th birthday with a new pet, Dingo, and pet owners who adore their dogs. It is inclusive of features for parents, keeping in mind the needs of Alice and Bob Jones.",
              "Release Notes: \nThe latest update introduces features for pet owners, drawing inspiration from Charlie's 12th birthday and his beloved dog Dingo. It enhances the user experience for all family members, including parents akin to Alice and Bob Jones.",
              "Game Docs: \nInstructions are tailored for young users like Charlie, who marked his 12th birthday with the addition of Dingo, a fluffy white canine. The document also caters to adult users, similar to Alice and Bob Jones, providing comprehensive guidance.",
              "Service FAQ: \nQ: Is this service suitable for families with pets? \nA: Absolutely, it's ideal for families like Charlie's, who celebrated his 12th birthday with the arrival of Dingo, his white, fluffy dog, along with parents similar to Alice and Bob Jones."
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "... (8 more variations)..."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ..."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "... (9 more variations) ..."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "... (9 more variations) ..."
            ]
          }
        }
      },
      {
        "id": "in-chinese",
        "hint": "Can we see it in Chinese?",
        "name": "The Jonese in Chinese",
        "start-language": "Chinese",
        "statement": "The Joneses, Alice and Bob, have one son Charlie who got a white, fluffy dog named Dingo for his 12th birthday. - in Chinese?",
        "image": "glasses/3.png",
        "intro": "Let's take a scenario where, for example, we need to work with a Chinese team.  So, after translating the simple story into Chinese, things continue to get more complicated for obvious reasons.",
        "syntax-locked-intro": "On the syntax locked side of things in particular, unless you know Chinese, and have enough context to read the syntax-locked Chinese descriptions of the family, to internalize, and understand it, you can't really determine whether it does, or does not accurately capture the Jones family.  Instead it remains ambiguous and unclear.  A mystery really.  And, despite the Syntax-Locking now all happening in Chinese, the Charlie, Alice and Bob Counter on the left all keep going up. hopefully Bob will always be called Bob... like, Forever!",
        "syntax-free-intro": "By contrast, you'll notice on the right side, that despite not understanding a single word of either the Syntax-Locked or the Syntax-Free versions of the knowledge, the Internal Geometry of the Syntax Free version still looks like a Martini Glass.  This is because that's the basic shape of the knowledge graph that falls out of this 1 sentence prompt, regardless of which language you use to describe the family. There's always just 1 charlie, even if, god forbid, he ever changed his name!",
        "mantra": "And we're now at like 4 minutes, and the Charlie counter is already at #charlieCounter# and counting... and it will just keep going up, it is remarkably persistent.",
        "languages": {
          "English": {
            "text-align": "left",
            "english_text": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
            "max-height": "10em",
            "variations": [
              "Project Proposal: \nOur project celebrates the special bond between Charlie and his 12th birthday gift, Dingo, a white, fluffy dog. This narrative also encompasses the family dynamic with his parents, Alice and Bob Jones, enriching the story with a complete family perspective.",
              "Statement of Work - SOW 1033: \nThe work involves creating an engaging environment for Charlie and his 12th birthday gift, Dingo, his white and fluffy canine companion. The project also considers the needs of Charlie's parents, Alice and Bob Jones, to create a holistic family environment.",
              "Specification: \nThe design is centered around children like Charlie and their special pets, particularly inspired by Charlie's 12th birthday gift, Dingo, a fluffy white canine. The specification is also user-friendly for adults, taking into account the preferences of Alice and Bob Jones.",
              "Change Request: \nThis amendment incorporates a pet care section, inspired by Charlie's 12th birthday and his special bond with his dog Dingo. The update is aimed to resonate with families with pets, similar to Charlie and his parents, Alice and Bob Jones.",
              "README: \nThis app is designed for families, focusing on young users like Charlie who celebrated his 12th birthday with a new pet, Dingo, and pet owners who adore their dogs. It is inclusive of features for parents, keeping in mind the needs of Alice and Bob Jones.",
              "Release Notes: \nThe latest update introduces features for pet owners, drawing inspiration from Charlie's 12th birthday and his beloved dog Dingo. It enhances the user experience for all family members, including parents akin to Alice and Bob Jones.",
              "Game Docs: \nInstructions are tailored for young users like Charlie, who marked his 12th birthday with the addition of Dingo, a fluffy white canine. The document also caters to adult users, similar to Alice and Bob Jones, providing comprehensive guidance.",
              "Service FAQ: \nQ: Is this service suitable for families with pets? \nA: Absolutely, it's ideal for families like Charlie's, who celebrated his 12th birthday with the arrival of Dingo, his white, fluffy dog, along with parents similar to Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "Why is the Glass Broken... 🤔",
        "statement": "Apparent SCANDEL introduced in the Chinese Translation.  😲",
        "hint": "Mistranslation...",
        "id": "mistranslation",
        "start-language": "Chinese",
        "image": "glasses/3-Lost.png",
        "intro": "On the other hand, let's imagine that something, unfortunately, gets lost in translation. A SCANDAL might ensue!",
        "syntax-locked-intro": "And, once again, on the syntax locked side of things... determining if those words do, or do not reflect reality, remains opaque, unclear, and a mystery. unless you speak chinese of course.  And if we're not careful, that could lead to issues!  And yet, even though everything is now happening in Chinese, the Charlie Counter on the left just keeps going up - it is just unstoppable.  ",
        "syntax-free-intro": "And, once again, the Internal Geometry on the right side, of even mistranslated information, in the form of a Syntax Free knowledge graph, betrays the fact that, at the very least, something, changed.  Further, the specific change allows us to infer what might have happened, relatively confidently.",
        "mantra": "5 minutes into this demo, and the Charlie counter on the left is already at #charlieCounter# and counting... and it will just keep going up, with unstoppable fortitude.",
        "languages": {
          "English": {
            "text-align": "left",
            "english_text": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
            "max-height": "10em",
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "Who the heck is Frank?",
        "statement": "Something in the chinese translation implied Frank is the Bio-Dad",
        "hint": "Show me in English!",
        "id": "mistranslation-explained",
        "image": "glasses/3-LostInEnglish.png",
        "intro": "Wait! Who the heck is frank?",
        "syntax-locked-intro": "In a syntax locked world, most of the syntax locked content will still refer to Bob being the father, despite the suggestion that Frank could actually be the Bio-Dad.  If we're not careful here this could lead to a SCANDAL! ",
        "syntax-free-intro": "After translating it back into English, Our suspitions about what be going on are confirmed, and the Internal Geometry of, even mistranslated information does indeed reflect the idea that Frank might indeed be the bio-dad.  A DNA test is called for to confirm one way or the other. EVen though the picture currently talks about Frank and Bob, andso, while the Charlie Counter on the left just keeps going up - it just never tires...  On the right side, Charlie's still there, and there's still just one of him",
        "mantra": "At the 6 minute Markus, and the Charlie counter is already at #charlieCounter# and counting... and it will just keep going up, it's literally tireless.",
        "languages": {
          "English": {
            "text-align": "left",
            "english_text": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
            "max-height": "10em",
            "variations": [
              "Project Proposal: \nOur project delves into the complex dynamics within Charlie's family, particularly hinting at Frank's possible role as his biological father, overshadowing Bob Jones. This narrative, intertwined with Charlie's 12th birthday gift, Dingo, a white, fluffy dog, adds layers to the family story involving Alice, Bob, and the unspoken presence of Frank.",
              "Statement of Work - SOW 1033: \nThe work involves crafting a narrative that subtly explores the nuanced relationship between Charlie, his parents Alice and Bob Jones, and the unacknowledged influence of Frank, potentially his biological father. This is juxtaposed with Charlie's innocent bond with Dingo, his 12th birthday gift.",
              "Specification: \nThe design subtly incorporates the complexities of family dynamics, hinting at Frank's potential role as Charlie's real father, creating a contrast with the ostensibly simple life of Charlie with his 12th birthday gift, Dingo, and his declared parents, Alice and Bob Jones.",
              "Change Request: \nThis amendment subtly introduces an undercurrent about Frank, possibly being the biological father of Charlie, into the narrative about Charlie's 12th birthday and his bond with Dingo. It adds depth to the story of Charlie and his parents, Alice and Bob Jones.",
              "README: \nThis app, designed for families, includes an underlying storyline hinting at Frank as Charlie's possible biological father, creating a complex backdrop for Charlie's 12th birthday celebration with his pet Dingo, and his life with Alice and Bob Jones.",
              "Release Notes: \nThe latest update subtly weaves in the possibility of Frank being Charlie's biological father, adding a layer of complexity to the family-focused features inspired by Charlie's 12th birthday and his bond with Dingo, under the guardianship of Alice and Bob Jones.",
              "Game Docs: \nInstructions now include subtle references to the family dynamic, hinting at the potential involvement of Frank as Charlie's biological father, against the backdrop of Charlie's life with his 12th birthday gift Dingo, and his life with Alice and Bob Jones.",
              "Service FAQ: \nQ: Is this service suitable for families with complex dynamics? \nA: Absolutely, it's ideal for families like Charlie's, where the undercurrent of Frank possibly being his biological father adds depth to the celebration of his 12th birthday with Dingo, and his life with Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "DNA Test Results... and, the wineglass is back!",
        "statement": "A DNS Test showed that Bob is in fact the dad",
        "hint": "DNA Results!!!",
        "id": "wineglass-back",
        "image": "glasses/4.png",
        "intro": "Ok! Phew!  Thank goodness... The DNA Test Results are back, and it looks like bob is in fact the Dad!  This finally resolves the whole frank thing once and for all. So now, we're back to our, increasingly familiar, martini glass.",
        "syntax-locked-intro": "In a syntax locked world, most of the syntax locked content will still refer to Bob being the father, but there are also likely to be a bunch of additional syntax-locked content suggesting that Frank could actually be the Bio-Dad.  And so until someone either corrects or updates this content, it is once again just out of date, stale or, as here, completely incorrect.",
        "syntax-free-intro": "However, after the DNA test confirmed that Bob was the dad - on the syntax free side of things, we can just Remove Frank from the graph, and re-link Bob as Charlie's only dad.  Even having cleared up the dad question we will see that still, of course, the Charlie Counter on the left just keeps going up - like the energizer bunny it keeps going, and goin, and going... you might notice that on the right side, however, Charlie is still there, and there's still just one of him - always, just 1 Charlie.",
        "mantra": "So, we're like 7 minutes into the demo now, and the Charlie counter is already at #charlieCounter# and counting... I *really* hope that none of them ever change their names.  Yikes... I mean... I *really* hope, because the counters all just gonna keep going up, and up, and up...",
        "languages": {
          "English": {
            "text-align": "left",
            "english_text": "The Joneses, Alice and Bob, have one son Charlie, who owns a white, fluffy dog named Dingo.",
            "max-height": "10em",
            "variations": [
              "Project Proposal: \nOur project delves into the complex dynamics within Charlie's family, particularly emphasizing the confirmed role of Bob Jones as his biological father, dispelling previous suspicions about Frank. This narrative, intertwined with Charlie's 12th birthday gift, Dingo, a white, fluffy dog, enriches the family story involving Alice, Bob, and the resolved uncertainties regarding paternity.",
              "Statement of Work - SOW 1033: \nThe work involves crafting a narrative that explores the nuanced relationship between Charlie, his parents Alice and Bob Jones, and the initial, but now resolved, uncertainties about Frank's role in the family. This is juxtaposed with Charlie's innocent bond with Dingo, his 12th birthday gift.",
              "Specification: \nThe design subtly incorporates the complexities of family dynamics, emphasizing Bob Jones's confirmed role as Charlie's real father, dispelling earlier suspicions about Frank, and creating a contrast with Charlie's life with his 12th birthday gift, Dingo, and his parents, Alice and Bob Jones.",
              "Change Request: \nThis amendment introduces a clarification about Bob Jones being the biological father of Charlie, dispelling earlier notions about Frank. It adds depth to the story of Charlie's 12th birthday and his bond with Dingo, under the care of his parents, Alice and Bob Jones.",
              "README: \nThis app, designed for families, includes a storyline that clarifies Bob Jones as Charlie's biological father, dispelling earlier assumptions about Frank. This creates a complex backdrop for Charlie's 12th birthday celebration with his pet Dingo, and his life with Alice and Bob Jones.",
              "Release Notes: \nThe latest update introduces the confirmation of Bob Jones as Charlie's biological father, replacing the previous theory about Frank. This adds a layer of clarity to the family-focused features inspired by Charlie's 12th birthday and his bond with Dingo, under the guardianship of Alice and Bob Jones.",
              "Game Docs: \nInstructions now include references to the family dynamic, clarifying Bob Jones as Charlie's biological father, against the backdrop of Charlie's life with his 12th birthday gift Dingo, and his life with Alice and Bob Jones.",
              "Service FAQ: \nQ: Is this service suitable for families with complex dynamics? \nA: Absolutely, it's ideal for families like Charlie's, where the narrative of Bob Jones being his biological father, dispelling earlier theories about Frank, adds depth to the celebration of his 12th birthday with Dingo, and his life with Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "Bob is now Markus, Charlie is 16!",
        "statement": "Right at the last minute, the Stakeholder asked, flustered.\n\nWho the hell is Bob?  His name Markus now!",
        "hint": "Charlie actually 16yo!",
        "id": "meet-16yo-charlie",
        "image": "glasses/5.png",
        "line-through": ["Bob:Markus"],
        "intro":"Oh No! the worst has happened...  Bob actually was never his name!! He was named Markus all along, and Charlie is not 12, as previously been thought... he actually 16.",
        "syntax-locked-intro": "In a syntax locked world, Literally all of the #charlieCounter# syntax-locked documents are either out of date, stale or, as here, completely incorrect.  If they are static documents like emails or printed paper, they will just be wrong... forever.  If they are editable documents, they will be wrong until an author comes back to that syntax-locked document and updates it.  So, despite there now being only 1 Markus (formerly known as Bob) Bob is still syntax locked in countless Syntax Locked documents, and until the change from Bob to Markus is Decided, Documented, Communicated to the necessary Party (or parties) even those editable documents will just be wrong...",
        "syntax-free-intro": "In the syntax free model - we double click on Bob and change it to Markus - and we're again, done. Because now there is just 1 Markus - even though he used to have the name Bob. Still... there's just 1 of him.",
        "mantra":"So, like 8 minutes in, and the Charlie counter on the left is already at #charlieCounter# and counting... And now the Markus counter is going up too, and it will just keep going up, just as unrelentingly as the Charlie counter.",
        "languages": {
          "English": {
            "text-align": "left",
            "max-height": "10em",
            "variations": [
              "Project Proposal: \nOur project celebrates the special bond between Charlie, now known as Markus, and his white, fluffy dog, Dingo. Originally a gift for his 12th birthday, the narrative now reflects three years later, as Markus is currently 16. This story also includes the family dynamic with his parents, Alice and Bob Jones, providing a full family perspective.",
              "Statement of Work - SOW 1033: \nThe work focuses on creating an engaging environment for Charlie, who is now 16 and goes by Mark. The narrative revolves around his 12th birthday gift, Dingo, a white and fluffy canine. Additionally, the project accounts for the needs of Mark's parents, Alice and Bob Jones, ensuring a complete family environment.",
              "Specification: \nThe design centers around children like Charlie, now 16 and referred to as Markus, and their special pets, drawing inspiration from Mark's 12th birthday gift, Dingo, a fluffy white canine. The specification is also considerate of adult preferences, keeping in mind Alice and Bob Jones.",
              "Change Request: \nThis amendment adds a pet care section, influenced by the story of Charlie, now 16 and known as Markus, and his bond with his dog Dingo since his 12th birthday. The update aims to resonate with pet-owning families similar to Markus and his parents, Alice and Bob Jones.",
              "README: \nThis app is designed for families, with a focus on young users like Charlie, who is now 16 and goes by the name Mark. He celebrated his 12th birthday with a new pet, Dingo. The app includes features for pet owners and considers the needs of parents like Alice and Bob Jones.",
              "Release Notes: \nThe latest update introduces features for pet owners, inspired by Charlie, now 16 and known as Markus, and his beloved dog Dingo, a gift from his 12th birthday. It enhances the experience for all family members, including parents similar to Alice and Bob Jones.",
              "Game Docs: \nInstructions are tailored for young users like Charlie, who is now 16 and called Mark. He marked his 12th birthday with Dingo, a fluffy white canine. The document also caters to adults, akin to Alice and Bob Jones, offering comprehensive guidance.",
              "Service FAQ: \nQ: Is this service suitable for families with pets? \nA: Absolutely, it's ideal for families like Charlie's, who is now 16 and goes by Mark. He celebrated his 12th birthday with the arrival of Dingo, his white, fluffy dog, and lives with parents like Alice and Bob Jones."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Unity Game Initialization: \npublic class GameInitialization : MonoBehaviour { \n  void Start() { \n    ... \n    Debug.Log(\"Family initialized: Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Family Interaction: \npublic class FamilyInteraction : MonoBehaviour { \n  void Interact(...) { \n    ... \n    Debug.Log(\"... interacted with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Scene Management: \npublic class FamilySceneController : MonoBehaviour { \n  void LoadFamilyScene() { \n    ... \n    Debug.Log(\"Loading scene with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Character Movement: \npublic class CharacterMovement : MonoBehaviour { \n  public void Move(..., ...) { \n    ... \n    Debug.Log(\"Moving ... to a new destination. Family: Alice, Bob, Charlie, Dingo\"); \n    ... \n  } \n}",
              "Unity Family Adventures: \npublic class FamilyAdventure : MonoBehaviour { \n  void StartAdventure() { \n    ... \n    Debug.Log(\"Starting adventure with Alice, Bob, Charlie, and Dingo\"); \n    ... \n  } \n}",
              "Unity Pet Interaction: \npublic class PetInteraction : MonoBehaviour { \n  public void PlayWithPet(Pet dingo) { \n    ... \n    Debug.Log(\"Playing with Dingo. Family members: Alice, Bob, Charlie\"); \n    ... \n  } \n}",
              "Python Family Budget Tracker: class FamilyBudgetTracker:\n    def track_expense(self, member, amount):\n        if member == 'Charlie':\n            ... # Tracking Charlie's expenses\n        elif member in ['Alice', 'Bob', 'Dingo']:\n            ...",
              "Python Charlie's Coins: class CoinStarTracker:\n    def update_stars(self, character, stars):\n        if character == 'Charlie':\n            ... # Update stars for Charlie\n        ...",
              "Python Household Chores: class ChoreAssigner:\n    def assign_chore(self, chore, member):\n        if member == 'Charlie':\n            ... # Assigning chore to Charlie\n        ...",
              "Python Movement Tracking: class MovementTracker:\n    def track_movement(self, character, coordinates):\n        if character == 'Charlie':\n            ... # Track Charlie's movements\n        ...",
              "Python Dingo's Activities: class ActivityTracker:\n    def log_activity(self, pet, activity):\n        if pet == 'Dingo':\n            ... # Log Dingo's activities, involving Charlie\n        ...",
              "Python Progress Tracker: class ProgressTracker:\n    def update_progress(self, student, subject, score):\n        if student == 'Charlie':\n            ... # Update Charlie's educational progress\n        ...",
              "Python Vacation Planner: class VacationPlanner:\n    def plan_trip(self, destination, family_members):\n        if 'Charlie' in family_members:\n            ... # Plan trip including Charlie\n        ...",

              "JavaScript: \nfunction Family() {\n this.members = [];\n}\nFamily.prototype.add = function(person) {\n this.members.push(person);\n};\n\nfunction Person(name) {\n this.name = name;\n this.pets = [];\n}\nPerson.prototype.addPet = function(pet) {\n this.pets.push(pet);\n};\n\nfunction Dog(name) {\n this.name = name;\n}\n\nvar joneses = new Family();\nvar alice = new Person('Alice');\nvar bob = new Person('Bob');\nvar charlie = new Person('Charlie');\nvar dingo = new Dog('Dingo');\n\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Java: \npublic class Family {\n private List<Person> members = new ArrayList<>();\n public void add(Person person) {\n members.add(person);\n }\n}\n\npublic class Person {\n private String name;\n private List<Dog> pets = new ArrayList<>();\n public Person(String name) { this.name = name; }\n public void addPet(Dog pet) { pets.add(pet); }\n}\n\npublic class Dog {\n private String name;\n public Dog(String name) { this.name = name; }\n}\n\nFamily joneses = new Family();\nPerson alice = new Person(\"Alice\");\nPerson bob = new Person(\"Bob\");\nPerson charlie = new Person(\"Charlie\");\nDog dingo = new Dog(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);",
              "Ruby: \nclass Family\n  attr_accessor :members\n  def initialize\n    @members = []\n  end\n  def add(person)\n    @members << person\n  end\nend\n\nclass Person\n  attr_accessor :name, :pets\n  def initialize(name)\n    @name = name\n    @pets = []\n  end\n  def add_pet(pet)\n    @pets << pet\n  end\nend\n\nclass Dog\n  attr_accessor :name\n  def initialize(name)\n    @name = name\n  end\nend\n\njoneses = Family.new\nalice = Person.new('Alice')\nbob = Person.new('Bob')\ncharlie = Person.new('Charlie')\ndingo = Dog.new('Dingo')\njoneses.add(alice)\njoneses.add(bob)\njoneses.add(charlie)\ncharlie.add_pet(dingo)",
              "C++: \n#include <vector>\n#include <string>\n\nstruct Person {\n std::string name;\n std::vector<Dog> pets;\n Person(std::string n) : name(n) {}\n void addPet(Dog& pet) { pets.push_back(pet); }\n};\n\nstruct Dog {\n std::string name;\n Dog(std::string n) : name(n) {}\n};\n\nstruct Family {\n std::vector<Person> members;\n void add(Person& person) { members.push_back(person); }\n};\n\nFamily joneses;\nPerson alice(\"Alice\");\nPerson bob(\"Bob\");\nPerson charlie(\"Charlie\");\nDog dingo(\"Dingo\");\njoneses.add(alice);\njoneses.add(bob);\njoneses.add(charlie);\ncharlie.addPet(dingo);"
            ]
          },
          "Spanish": {
            "variations": [
              "Alice y Bob Jones están casados. Tienen un hijo llamado Charlie. Charlie tiene un perro blanco y esponjoso llamado Dingo.",
              "Bob y Alice, un matrimonio, son padres de Charlie. El compañero de Charlie es su perro Dingo, que es tan blanco como la nieve y esponjoso.",
              "Charlie es hijo de Alice y Bob Jones. Tiene un perro blanco y esponjoso llamado Dingo.",
              "La familia Jones, compuesta por Alice, Bob y su hijo Charlie, posee un perro blanco y esponjoso llamado Dingo.",
              "Alice y Bob, una pareja casada, tienen un hijo, Charlie, quien es dueño de un perro blanco y esponjoso, Dingo.",
              "En el hogar de los Jones, Alice y Bob crían a su hijo Charlie, dueño de Dingo, un canino esponjoso y blanco.",
              "Los Jones, Alice y Bob, tienen un hijo, Charlie. Charlie adora a su perro Dingo, de pelaje blanco y suave.",
              "Alice y Bob Jones, junto a su hijo Charlie, cuidan de Dingo, un perro de pelaje blanco y esponjoso.",
              "Dentro de la familia Jones, conformada por Alice, Bob y su hijo Charlie, se encuentra Dingo, un perro de pelo blanco y esponjoso.",
              "Alice Jones y su esposo Bob, junto a su hijo Charlie, conviven con Dingo, un perro blanco y peludo."
            ]
          },
          "Greek": {
            "variations": [
              "Η Άλις και ο Μπομπ Τζόουνς είναι παντρεμένοι. Έχουν έναν γιο που τον λένε Τσάρλι. Ο Τσάρλι έχει έναν λευκό, αφράτο σκύλο, τον Ντίνγκο.",
              "Ο Μπομπ και η Άλις, ένα παντρεμένο ζευγάρι, είναι οι γονείς του Τσάρλι. Ο σύντροφος του Τσάρλι είναι ο σκύλος του, ο Ντίνγκο, λευκός και αφράτος.",
              "Ο Τσάρλι, ο γιος των Άλις και Μπομπ Τζόουνς, έχει έναν σκύλο με το όνομα Ντίνγκο, γνωστό για το λευκό και αφράτο τρίχωμά του.",
              "Η οικογένεια Τζόουνς αποτελείται από τους Άλις, Μπομπ και τον γιο τους Τσάρλι. Ο Τσάρλι έχει έναν σκύλο ονόματι Ντίνγκο, ο οποίος είναι λευκός και αφράτος.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ έχουν έναν γιο, τον Τσάρλι. Το κατοικίδιο του Τσάρλι, ο Ντίνγκο, είναι ένας αφράτος λευκός σκύλος.",
              "Στο σπίτι των Τζόουνς, η Άλις και ο Μπομπ μεγαλώνουν τον γιο τους Τσάρλι, ο οποίος έχει τον Ντίνγκο, έναν αφράτο λευκό σκύλο.",
              "Οι Τζόουνς, η Άλις και ο Μπομπ, έχουν έναν γιο, τον Τσάρλι. Ο Τσάρλι λατρεύει τον σκύλο του, τον Ντίνγκο, με το λευκό και αφράτο τρίχωμα.",
              "Η Άλις και ο Μπομπ Τζόουνς, μαζί με τον γιο τους Τσάρλι, φροντίζουν τον Ντίνγκο, έναν σκύλο με λευκό και αφράτο τρίχωμα.",
              "Μέσα στην οικογένεια Τζόουνς, που αποτελείται από την Άλις, τον Μπομπ και τον γιο τους Τσάρλι, βρίσκεται ο Ντίνγκο, ένας σκύλος με λευκό και αφράτο τρίχωμα.",
              "Η Άλις Τζόουνς και ο σύζυγός της Μπομπ, μαζί με τον γιο τους Τσάρλι, ζουν με τον Ντίνγκο, έναν λευκό και αφράτο σκύλο."
            ]
          },
          "Chinese": {
            "variations": [
              "艾丽丝和鲍勃·琼斯是夫妻。 他们有一个叫查理的儿子。 查理有一只白色的，蓬松的狗，叫丁戈。",
              "查理是艾丽丝与鲍勃·琼斯的儿子，他拥有一只名叫丁戈的白色蓬松狗。",
              "在琼斯家，有夫妻二人艾丽丝和鲍勃，还有他们的儿子查理，以及查理的宠物狗丁戈，它的毛发白且蓬松。",
              "艾丽丝和鲍勃·琼斯是一对夫妇，他们养育着儿子查理和一只白色蓬松的狗丁戈。",
              "查理，作为艾丽丝和鲍勃·琼斯之子，有一只叫丁戈的白毛蓬松狗。",
              "琼斯一家由艾丽丝、鲍勃和他们的儿子查理组成，还有查理的白色蓬松狗丁戈。",
              "艾丽丝与鲍勃·琼斯的家中有他们的儿子查理和一只白色蓬松的宠物狗丁戈。",
              "查理是艾丽丝和鲍勃·琼斯的孩子，他养了一只名为丁戈的白色蓬松狗。",
              "在琼斯家族中，艾丽丝和鲍勃有一个儿子叫查理，查理有一只白色蓬松的狗，名叫丁戈。",
              "艾丽丝和鲍勃·琼斯夫妇的儿子查理拥有一只蓬松白色的狗，它的名字叫丁戈。"
            ]
          }
        }
      },
      {
        "name": "What does a Syntax-Free (or Syntax Independent) World Look Like?  Let's take a look.",
        "statement": "Okay - so Syntax is problematic - especially over time, but what's the alternative?",
        "hint": "Charlie actually 16!",
        "id": "syntax-free-world",
        "image": "glasses/syntax-free.png",
        "line-through": ["Bob:Markus"],
        "intro": "Okay - so Syntax is problematic - especially over time, but what's the alternative?",        
        "syntax-locked-intro": "In the World where rules are defined free from Syntax, all of these documents can flow from 1 SIMM (a Syntax-Independent Meta-Model)",
        "syntax-free-intro": "Because with a SIMM... we can define the size and shape of the idea, project, plan or anything really, along with the internal geometry of those ideas, we can add a rich set of business rules - all defined at once. In one Place.  A true Single Source of Truth, in fact.",
        "mantra": "Because With a SIMM - a Syntax independent model of the whole project - everything downstream from that gets simpler. Much, Much, Simpler! \n\nThis is the same information, but built in a context that is completely free from syntax.\nYes - this model uses some english words - but the relationships of these family members is not coupled to a description.\nWe can see that Alice is Charlie is her son, and Bob is her Husband.\nWe can also see the Dingo is  a White Fluffy Dog.\n\nThis model, unlike the Syntax-Locked versions is not a description of the \njones family, it is a mirror of it - with just One Charlie.  And since he\nIs a boy - Alice have a Son Charlie.  But if instead, Charlie were a Girl,\nThen she Alice and Bob would have a Daugher.\n\nAs you can see, this model is always internally consiste - and that is\nspecifically possible, because this is not a description of the family,\nit is a Mirror Of it.\n\nNow - the next logical question would be to point out that spreadsheets\nare not an effective way to communicate.  So while they may be interanlly\nconsistent - what can we DO with this model, that we couldn't just do \nwith a Syntax-Locked version of the same details?\n\nWell - let's select and copy all these details from Air table, which \ncontains all the details about the family, and see what ChatGPT has to \nsay about it.\n\nSo we can go to ChatGPT - and simply paste in the story - and ask it to\ndescribe the family - and everything that's provided is from that spreadsheet,\nand GPT goes ahead and writes a correct, accurate, up to date description \nof the family. Including all the meta data about Charlie's Birthday, \nand where dingo came from. \n\nThe most important key to keep in mind here though, is that this description\nis not the \"source\" of that knowledge.  It is derived *from* the source.\n\nThe source of this knowledge is back in air table. Here, we can even make \nchanges - like the introduction of  Frank into the picture.  At the moment, \nthere are just 4 active members of the family.  So down in the Inactive group \nof Family Members, we can see that Frank is current UNRELATED to the family.  \nSo none of his associated relationships are ingluded either.\n\nBut if we just drag him up into the active group - now all of the \nrelationships are updated to include Frank, and his biography is inclued as well.\n\nWith that change made, we can then again copy/paste the details from our \nsyntax independent model of the family - and paste it into ChatGPT. Once \nagain, it is able to create a seamless, always internally consistent \ndescription of the family. now also including Frank, and the associated\nimplication that he might actually be Charlie's bio-dad.\n \nWhat we can see from the air table version, is that frank is mentioned \nmultiple times, describing who he is and how he is related to the family \nThere are then also additional mentions in ChatGPTs description of the \ndata from air table now include the detail that Frank might be the bio-dad.\nFrank will be included in these kinds of syntax locked versions, up to and until \nhe is not longer included in the model.\n\n\nBack in air table - frank was determined to be unrelated, and so we will \ndrag him back out of the ACTIVE group.  And then - let's pretend that a \nnew family member, maria, who plays the violin enters the family.  \nOnce again, the stories update. In this case, we can see that Alice \nis mother of the Child... Maria.\n\nOnce again, we'll copy/paste the whole story as it currently is - \nand paste it into chatgpt like before. Once again - it should now \nmention that they have 2 children - and\n\nAnd when we ask who Frank is, it says that there is no mention of Frank - because \nhe's not the dad.  We just dragged him down in Air table, to the Inactive\ngroup, and then he (and all of his associated relationships went away from the \nactive model).\n\nWe can ask who Maria is and it tells us about them as well.  Because it knows. \n\n\n\nAnd we can ask it to describe the whole family once again, and it creates an \nalways internally consistent description of the whole family, now including \nthe fact that there are now 4 \"humans\" and 1 dog.  And that maria plays the \nviolin,  And uses the appropriate They, Them pronouns when referring to them. Here \nagain, it is important to note that this syntax-locked content is not the \nsource of the knowledge.  It is derived from the Source, which is in air table.\n\nWhere, back here on the main page - we can continue to make other changes as \nwell, including new ones in addition to what happened in the previous demo.  \n\nFor example, Let's start by making Alice a Mechanic - which is what she is.\n\nLet's also Update Bob - because he is a teacher and also still a parent.\n\nSelecting the current family details, \n\nCopy/paste to ChatGPT like Usual - and let's see what we get.\n\nOnce again we get a description of the family, but this time, we get the description of the family with Alice specifically mentioned as a mechanic, and Bob as a school teacher. Along with continuing to refer to Charlie as the owner of dingo, that he got for his 12th birthday.\n\nAnd so I can also now ask what they do professionally though - and it can describe what it knows of their background..",
        "languages": {
          "English": {
            "text-align": "left",
            "max-height": "10em",
            "variations": [
              "Syntax Indepdendent Meta Model (SIMM): Just Airtable (or *any other* ACID compliant DB - for the model",
              "SIMM Bsuiness Rules: Where the Business Rules (schema) can be easily exported to Json (extended jsd), xml/xsd/other, etc...",
              "SIMM Based Dev Artifacts: Export Data to json/xml/csv,etc...",
              "SIMM Based SDKs: Providing an entire base layer of documentation, code, testing artifacts.",
              "Consistent Rules: Always internally consistent by construction",
              "Cross Platform Consistency: These will tend to be consistent, not just internally, but accross them all, because they are all derived from the same source - One Syntax-Free Model."
            ]
          },
          "Code": {
            "font-family": "'Courier New', monospace",
            "font-size": "1.2em",
            "text-align": "left",
            "min-height": "10em",
            "variations": [
              "Syntax Indepdendent Meta Model (SIMM): Just Airtable (or *any other* ACID compliant DB - for the model",
              "Syntax Indepdendent Meta Model (SIMM): Where the Business Rules (schema) can be easily exported to Json (extended jsd), xml/xsd/other, etc...",
              "Syntax Indepdendent Meta Model (SIMM): Export Data to json/xml/csv,etc...",
              "Syntax Indepdendent Meta Model (SIMM): Always interanlly consistent by construction",
              "Syntax Indepdendent Meta Model (SIMM): Providing an entire base layer of documentation, code, testing artifacts.",
              "Syntax Indepdendent Meta Model (SIMM): These will tend to be consistent, not just internally, but accross them all, because they are all derived from the same source - One Syntax-Free Model."
            ]
          },
          "Spanish": {
            "variations": [
              "Syntax Indepdendent Meta Model (SIMM): Just Airtable (or *any other* ACID compliant DB - for the model",
              "Syntax Indepdendent Meta Model (SIMM): Where the Business Rules (schema) can be easily exported to Json (extended jsd), xml/xsd/other, etc...",
              "Syntax Indepdendent Meta Model (SIMM): Export Data to json/xml/csv,etc...",
              "Syntax Indepdendent Meta Model (SIMM): Always interanlly consistent by construction",
              "Syntax Indepdendent Meta Model (SIMM): Providing an entire base layer of documentation, code, testing artifacts.",
              "Syntax Indepdendent Meta Model (SIMM): These will tend to be consistent, not just internally, but accross them all, because they are all derived from the same source - One Syntax-Free Model."
            ]
          },
          "Greek": {
            "variations": [
              "Syntax Indepdendent Meta Model (SIMM): Just Airtable (or *any other* ACID compliant DB - for the model",
              "Syntax Indepdendent Meta Model (SIMM): Where the Business Rules (schema) can be easily exported to Json (extended jsd), xml/xsd/other, etc...",
              "Syntax Indepdendent Meta Model (SIMM): Export Data to json/xml/csv,etc...",
              "Syntax Indepdendent Meta Model (SIMM): Always interanlly consistent by construction",
              "Syntax Indepdendent Meta Model (SIMM): Providing an entire base layer of documentation, code, testing artifacts.",
              "Syntax Indepdendent Meta Model (SIMM): These will tend to be consistent, not just internally, but accross them all, because they are all derived from the same source - One Syntax-Free Model."
            ]
          },
          "Chinese": {
            "variations": [
              "Syntax Indepdendent Meta Model (SIMM): Just Airtable (or *any other* ACID compliant DB - for the model",
              "Syntax Indepdendent Meta Model (SIMM): Where the Business Rules (schema) can be easily exported to Json (extended jsd), xml/xsd/other, etc...",
              "Syntax Indepdendent Meta Model (SIMM): Export Data to json/xml/csv,etc...",
              "Syntax Indepdendent Meta Model (SIMM): Always interanlly consistent by construction",
              "Syntax Indepdendent Meta Model (SIMM): Providing an entire base layer of documentation, code, testing artifacts.",
              "Syntax Indepdendent Meta Model (SIMM): These will tend to be consistent, not just internally, but accross them all, because they are all derived from the same source - One Syntax-Free Model."
            ]
          }
        }
      }
    ]
  }
}
